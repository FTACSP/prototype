# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'StatusAPIUX.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# K1 = 0.5 (mês atual)
# K2 = 0.25 (diferença, negativo indica que o mês atual)
# K3 =0.25
# RB = 1,1

# CALCULAR GV = Somar as notas das questões de 1 a 7  e dividir por 7, joga na formula e vai fazendo a primeira, segunda, terceira parcela, multiplicar por RB e dividir 2 por m
#                      TP = Somar as notas das questões de 8 a 14
#                      SI = Somar as notas das questões de 15 a 24

# =IGV

# 1ª Parcela = IGV * k1
# 2º Parcela = (IGV2-IGV1)*k2
# 3 - Parcela =
# Soma e Divide por 12, menos a atual
# RB = 1,1
# M= nº incidentes

# FTACSP V1.00 *
# Avaliador: Joaquim
# Traduzindo

# Incluir as 3 colunas do GVJ,TPJ, SIJ

# traduzir o git
# traduzir o formulario de avaliacao
# tirar a foto

# Quando tiver incidentes não usar o RB
# Colocar 3 casas
# Remover ID(AUTO), Remover Evaluator (as colunas)
# avaliadorusr pelo avaliador, cadastrado com nome completo
# avaliador hugo
# from _typeshed import NoneType


# Ir fazendo relatório técnico
# Diagrama do Banco de dados
# Diagrama dos casos de uso do programa, descrições


# RB no banco de dados
# Hash na senha no banco de dados, não só na criação do novo usuário

import string
import random
import uuid
import hashlib
from datetime import date
from datetime import datetime
import pandas as pd
import numpy as np
import mysql.connector
from natsort import natsorted
import matplotlib
from PyQt5 import QtCore, QtGui, QtWidgets, uic, Qt, QtChart
from PyQt5.QtWidgets import QMainWindow, QApplication, QPushButton, QDialog, QVBoxLayout, QMessageBox, QButtonGroup, QAbstractButton, QRadioButton, QTableWidget, QTableWidgetItem, QWidget, QListWidget, QListWidgetItem
from PyQt5.QtGui import *
from PyQt5.QtCore import *
from msilib.schema import RadioButton

# from PyQt5 import QChart, QChartView, QValueAxis, QBarCategoryAxis, QBarSet, QBarSeries
# from PyQt5.QtChart import QChart, QChartView, QValueAxis, QBarCategoryAxis, QBarSet, QBarSeries
# print(dir(QGradient))
from pyqtgraph import PlotWidget, plot
import pyqtgraph as pg


numero_id = 0

banco = mysql.connector.connect(host='localhost',
                                     user='root',
                                     password='885522',
                                     database='statusapidb', buffered=True)


def funcao_iniciar():
    formulario_avaliacao.show()
    # radioGroups()
    print("Função iniciar começada")


def radioGroups():
    radioGroup()
    radioGroup_2()
    radioGroup_3()
    radioGroup_4()
    radioGroup_5()
    radioGroup_6()
    radioGroup_7()
    radioGroup_8()
    radioGroup_9()
    radioGroup_10()
    radioGroup_11()
    radioGroup_12()
    radioGroup_13()


def radioGroup():

    if formulario_avaliacao.radioButton1.toggled.connect(radioGroup):

        formulario_avaliacao.radioButton1.setStyleSheet("background-color: ")
        if formulario_avaliacao.radioButton1.isChecked():
            formulario_avaliacao.radioButton1.setStyleSheet(
                "background-color: yellow")

    if formulario_avaliacao.radioButton2.toggled.connect(radioGroup):

        formulario_avaliacao.radioButton2.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton2.isChecked():
            formulario_avaliacao.radioButton2.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton3.toggled.connect(radioGroup):

        formulario_avaliacao.radioButton3.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton3.isChecked():
            formulario_avaliacao.radioButton3.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton4.toggled.connect(radioGroup):

        formulario_avaliacao.radioButton4.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton4.isChecked():
            formulario_avaliacao.radioButton4.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton5.toggled.connect(radioGroup):

        formulario_avaliacao.radioButton5.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton5.isChecked():
            formulario_avaliacao.radioButton5.setStyleSheet(
                "background-color: yellow")

    return
    # radioButton1_Reset=radioButton1()
    # radioGroup=
    # return radioGroup_isChecked()
    # radioGroup() = radioGroup

    # radioGroup_2()

    #     radioGroup = 0


def radioGroup_2():
    if formulario_avaliacao.radioButton6.toggled.connect(radioGroup_2):

        formulario_avaliacao.radioButton6.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton7.toggled.connect(radioGroup_2):

        formulario_avaliacao.radioButton7.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton8.toggled.connect(radioGroup_2):

        formulario_avaliacao.radioButton8.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton9.toggled.connect(radioGroup_2):

        formulario_avaliacao.radioButton9.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton10.toggled.connect(radioGroup_2):

        formulario_avaliacao.radioButton10.setStyleSheet(
            "background-color: ")

    # radioGroup_isChecked_2()
    # return


# def radioGroup_isChecked_2():
    if formulario_avaliacao.radioButton6.isChecked():
        formulario_avaliacao.radioButton6.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton7.isChecked():
        formulario_avaliacao.radioButton7.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton8.isChecked():
        formulario_avaliacao.radioButton8.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton9.isChecked():
        formulario_avaliacao.radioButton9.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton10.isChecked():
        formulario_avaliacao.radioButton10.setStyleSheet(
            "background-color: yellow")
    # radioGroup_3()
    # print("Ok3")
    # pass
    return


def radioGroup_3():
    if formulario_avaliacao.radioButton11.toggled.connect(radioGroup_3):

        formulario_avaliacao.radioButton11.setStyleSheet(
            "background-color: ")

    if formulario_avaliacao.radioButton12.toggled.connect(radioGroup_3):

        formulario_avaliacao.radioButton12.setStyleSheet(
            "background-color: ")

    if formulario_avaliacao.radioButton13.toggled.connect(radioGroup_3):

        formulario_avaliacao.radioButton13.setStyleSheet(
            "background-color: ")

    if formulario_avaliacao.radioButton14.toggled.connect(radioGroup_3):

        formulario_avaliacao.radioButton14.setStyleSheet(
            "background-color: ")

    if formulario_avaliacao.radioButton15.toggled.connect(radioGroup_3):

        formulario_avaliacao.radioButton15.setStyleSheet(
            "background-color: ")

    # radioGroup_isChecked_3()
    # return


# def radioGroup_isChecked_3():
    if formulario_avaliacao.radioButton11.isChecked():
        formulario_avaliacao.radioButton11.setStyleSheet(
            "background-color: yellow")

    if formulario_avaliacao.radioButton12.isChecked():
        formulario_avaliacao.radioButton12.setStyleSheet(
            "background-color: yellow")

    if formulario_avaliacao.radioButton13.isChecked():
        formulario_avaliacao.radioButton13.setStyleSheet(
            "background-color: yellow")

    if formulario_avaliacao.radioButton14.isChecked():
        formulario_avaliacao.radioButton14.setStyleSheet(
            "background-color: yellow")

    if formulario_avaliacao.radioButton15.isChecked():
        formulario_avaliacao.radioButton15.setStyleSheet(
            "background-color: yellow")

    # radioGroup_4()
    return


def radioGroup_4():
    if formulario_avaliacao.radioButton16.toggled.connect(radioGroup_4):

        formulario_avaliacao.radioButton16.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton17.toggled.connect(radioGroup_4):

        formulario_avaliacao.radioButton17.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton18.toggled.connect(radioGroup_4):

        formulario_avaliacao.radioButton18.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton19.toggled.connect(radioGroup_4):

        formulario_avaliacao.radioButton19.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton20.toggled.connect(radioGroup_4):

        formulario_avaliacao.radioButton20.setStyleSheet(
            "background-color: ")

    # radioGroup_isChecked_4()
    # return

# def radioGroup_isChecked_4():
    if formulario_avaliacao.radioButton16.isChecked():
        formulario_avaliacao.radioButton16.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton17.isChecked():
        formulario_avaliacao.radioButton17.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton18.isChecked():
        formulario_avaliacao.radioButton18.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton19.isChecked():
        formulario_avaliacao.radioButton19.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton20.isChecked():
        formulario_avaliacao.radioButton20.setStyleSheet(
            "background-color: yellow")

    # radioGroup_5()
    return


def radioGroup_5():
    if formulario_avaliacao.radioButton21.toggled.connect(radioGroup_5):

        formulario_avaliacao.radioButton21.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton22.toggled.connect(radioGroup_5):

        formulario_avaliacao.radioButton22.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton23.toggled.connect(radioGroup_5):

        formulario_avaliacao.radioButton23.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton24.toggled.connect(radioGroup_5):

        formulario_avaliacao.radioButton24.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton25.toggled.connect(radioGroup_5):

        formulario_avaliacao.radioButton25.setStyleSheet(
            "background-color: ")

#     radioGroup_isChecked_5()
#     return


# def radioGroup_isChecked_5():

    if formulario_avaliacao.radioButton21.isChecked():
        formulario_avaliacao.radioButton21.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton22.isChecked():
        formulario_avaliacao.radioButton22.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton23.isChecked():
        formulario_avaliacao.radioButton23.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton24.isChecked():
        formulario_avaliacao.radioButton24.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton25.isChecked():
        formulario_avaliacao.radioButton25.setStyleSheet(
            "background-color: yellow")
    # radioGroup_6()
    return


def radioGroup_6():
    if formulario_avaliacao.radioButton26.toggled.connect(radioGroup_6):

        formulario_avaliacao.radioButton26.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton27.toggled.connect(radioGroup_6):

        formulario_avaliacao.radioButton27.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton28.toggled.connect(radioGroup_6):

        formulario_avaliacao.radioButton28.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton29.toggled.connect(radioGroup_6):

        formulario_avaliacao.radioButton29.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton30.toggled.connect(radioGroup_6):

        formulario_avaliacao.radioButton30.setStyleSheet(
            "background-color: ")

#     radioGroup_isChecked_6()
#     return


# def radioGroup_isChecked_6():

    if formulario_avaliacao.radioButton26.isChecked():
        formulario_avaliacao.radioButton26.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton27.isChecked():
        formulario_avaliacao.radioButton27.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton28.isChecked():
        formulario_avaliacao.radioButton28.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton29.isChecked():
        formulario_avaliacao.radioButton29.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton30.isChecked():
        formulario_avaliacao.radioButton30.setStyleSheet(
            "background-color: yellow")
    # radioGroup_7()
    return


def radioGroup_7():
    if formulario_avaliacao.radioButton31.toggled.connect(radioGroup_7):

        formulario_avaliacao.radioButton31.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton32.toggled.connect(radioGroup_7):

        formulario_avaliacao.radioButton32.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton33.toggled.connect(radioGroup_7):

        formulario_avaliacao.radioButton33.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton34.toggled.connect(radioGroup_7):

        formulario_avaliacao.radioButton34.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton35.toggled.connect(radioGroup_7):

        formulario_avaliacao.radioButton35.setStyleSheet(
            "background-color: ")

#     radioGroup_isChecked_7()
#     return


# def radioGroup_isChecked_7():

    if formulario_avaliacao.radioButton31.isChecked():
        formulario_avaliacao.radioButton31.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton32.isChecked():
        formulario_avaliacao.radioButton32.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton33.isChecked():
        formulario_avaliacao.radioButton33.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton34.isChecked():
        formulario_avaliacao.radioButton34.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton35.isChecked():
        formulario_avaliacao.radioButton35.setStyleSheet(
            "background-color: yellow")
    # radioGroup_8()
    return


def radioGroup_8():
    if formulario_avaliacao.radioButton36.toggled.connect(radioGroup_8):

        formulario_avaliacao.radioButton36.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton37.toggled.connect(radioGroup_8):

        formulario_avaliacao.radioButton37.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton38.toggled.connect(radioGroup_8):

        formulario_avaliacao.radioButton38.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton39.toggled.connect(radioGroup_8):

        formulario_avaliacao.radioButton39.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton40.toggled.connect(radioGroup_8):

        formulario_avaliacao.radioButton40.setStyleSheet(
            "background-color: ")

#     radioGroup_isChecked_8()
#     return


# def radioGroup_isChecked_8():

    if formulario_avaliacao.radioButton36.isChecked():
        formulario_avaliacao.radioButton36.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton37.isChecked():
        formulario_avaliacao.radioButton37.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton38.isChecked():
        formulario_avaliacao.radioButton38.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton39.isChecked():
        formulario_avaliacao.radioButton39.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton40.isChecked():
        formulario_avaliacao.radioButton40.setStyleSheet(
            "background-color: yellow")
    # radioGroup_9()
    return


def radioGroup_9():
    if formulario_avaliacao.radioButton41.toggled.connect(radioGroup_9):

        formulario_avaliacao.radioButton41.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton42.toggled.connect(radioGroup_9):

        formulario_avaliacao.radioButton42.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton43.toggled.connect(radioGroup_9):

        formulario_avaliacao.radioButton43.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton44.toggled.connect(radioGroup_9):

        formulario_avaliacao.radioButton44.setStyleSheet(
            "background-color: ")
    if formulario_avaliacao.radioButton45.toggled.connect(radioGroup_9):

        formulario_avaliacao.radioButton45.setStyleSheet(
            "background-color: ")

#     radioGroup_isChecked_9()
#     return


# def radioGroup_isChecked_9():

    if formulario_avaliacao.radioButton41.isChecked():
        formulario_avaliacao.radioButton41.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton42.isChecked():
        formulario_avaliacao.radioButton42.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton43.isChecked():
        formulario_avaliacao.radioButton43.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton44.isChecked():
        formulario_avaliacao.radioButton44.setStyleSheet(
            "background-color: yellow")
    if formulario_avaliacao.radioButton45.isChecked():
        formulario_avaliacao.radioButton45.setStyleSheet(
            "background-color: yellow")
    # radioGroup_10()


def radioGroup_10():
    # formulario_avaliacao =
 # for s in range(len(dados_lidos3,)):
    # button = radioGroup.checkedButton()
    if formulario_avaliacao.radioButton46.toggled.connect(radioGroup_10):

        formulario_avaliacao.radioButton46.setStyleSheet("background-color: ")
        if formulario_avaliacao.radioButton46.isChecked():
            formulario_avaliacao.radioButton46.setStyleSheet(
                "background-color: yellow")

    if formulario_avaliacao.radioButton47.toggled.connect(radioGroup_10):

        formulario_avaliacao.radioButton47.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton47.isChecked():
            formulario_avaliacao.radioButton47.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton48.toggled.connect(radioGroup_10):

        formulario_avaliacao.radioButton48.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton48.isChecked():
            formulario_avaliacao.radioButton48.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton49.toggled.connect(radioGroup_10):

        formulario_avaliacao.radioButton49.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton49.isChecked():
            formulario_avaliacao.radioButton49.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton50.toggled.connect(radioGroup_10):

        formulario_avaliacao.radioButton50.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton50.isChecked():
            formulario_avaliacao.radioButton50.setStyleSheet(
                "background-color: yellow")
    return


def radioGroup_11():
    # formulario_avaliacao =
 # for s in range(len(dados_lidos3,)):
    # button = radioGroup.checkedButton()
    if formulario_avaliacao.radioButton51.toggled.connect(radioGroup_11):

        formulario_avaliacao.radioButton51.setStyleSheet("background-color: ")
        if formulario_avaliacao.radioButton51.isChecked():
            formulario_avaliacao.radioButton51.setStyleSheet(
                "background-color: yellow")

    if formulario_avaliacao.radioButton52.toggled.connect(radioGroup_11):

        formulario_avaliacao.radioButton52.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton52.isChecked():
            formulario_avaliacao.radioButton52.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton53.toggled.connect(radioGroup_11):

        formulario_avaliacao.radioButton53.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton53.isChecked():
            formulario_avaliacao.radioButton58.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton54.toggled.connect(radioGroup_11):

        formulario_avaliacao.radioButton54.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton54.isChecked():
            formulario_avaliacao.radioButton54.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton55.toggled.connect(radioGroup_11):

        formulario_avaliacao.radioButton55.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton55.isChecked():
            formulario_avaliacao.radioButton55.setStyleSheet(
                "background-color: yellow")
    return


def radioGroup_12():
    # formulario_avaliacao =
 # for s in range(len(dados_lidos3,)):
    # button = radioGroup.checkedButton()
    if formulario_avaliacao.radioButton56.toggled.connect(radioGroup_12):

        formulario_avaliacao.radioButton56.setStyleSheet("background-color: ")
        if formulario_avaliacao.radioButton56.isChecked():
            formulario_avaliacao.radioButton56.setStyleSheet(
                "background-color: yellow")

    if formulario_avaliacao.radioButton57.toggled.connect(radioGroup_12):

        formulario_avaliacao.radioButton57.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton57.isChecked():
            formulario_avaliacao.radioButton57.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton58.toggled.connect(radioGroup_12):

        formulario_avaliacao.radioButton58.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton58.isChecked():
            formulario_avaliacao.radioButton58.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton59.toggled.connect(radioGroup_12):

        formulario_avaliacao.radioButton59.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton59.isChecked():
            formulario_avaliacao.radioButton59.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton60.toggled.connect(radioGroup_12):

        formulario_avaliacao.radioButton60.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton60.isChecked():
            formulario_avaliacao.radioButton60.setStyleSheet(
                "background-color: yellow")
    return


def radioGroup_13():

    if formulario_avaliacao.radioButton61.toggled.connect(radioGroup_13):

        formulario_avaliacao.radioButton61.setStyleSheet("background-color: ")
        if formulario_avaliacao.radioButton61.isChecked():
            formulario_avaliacao.radioButton61.setStyleSheet(
                "background-color: yellow")

    if formulario_avaliacao.radioButton62.toggled.connect(radioGroup_13):

        formulario_avaliacao.radioButton62.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton62.isChecked():
            formulario_avaliacao.radioButton62.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton63.toggled.connect(radioGroup_13):

        formulario_avaliacao.radioButton63.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton63.isChecked():
            formulario_avaliacao.radioButton63.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton64.toggled.connect(radioGroup_13):

        formulario_avaliacao.radioButton64.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton64.isChecked():
            formulario_avaliacao.radioButton64.setStyleSheet(
                "background-color: yellow")
    if formulario_avaliacao.radioButton65.toggled.connect(radioGroup_13):

        formulario_avaliacao.radioButton65.setStyleSheet(
            "background-color: ")
        if formulario_avaliacao.radioButton65.isChecked():
            formulario_avaliacao.radioButton65.setStyleSheet(
                "background-color: yellow")
    return
# limpar() #vai pra proxima tela nao precisa limpar


def limpar_dados():
    #Apagar seleção#
    formulario_avaliacao.comboBox_2.clear()


def limpar_avaliacao():
    formulario_avaliacao.radioButton5.setChecked(True)
    formulario_avaliacao.radioButton10.setChecked(True)
    formulario_avaliacao.radioButton15.setChecked(True)
    formulario_avaliacao.radioButton20.setChecked(True)
    formulario_avaliacao.radioButton25.setChecked(True)
    formulario_avaliacao.radioButton30.setChecked(True)
    formulario_avaliacao.radioButton35.setChecked(True)
    formulario_avaliacao.radioButton40.setChecked(True)
    formulario_avaliacao.radioButton45.setChecked(True)
    formulario_avaliacao.radioButton50.setChecked(True)
    formulario_avaliacao.radioButton55.setChecked(True)
    formulario_avaliacao.radioButton60.setChecked(True)
    formulario_avaliacao.radioButton65.setChecked(True)
    formulario_avaliacao.radioButton70.setChecked(True)
    formulario_avaliacao.radioButton75.setChecked(True)
    formulario_avaliacao.radioButton80.setChecked(True)
    formulario_avaliacao.radioButton85.setChecked(True)
    formulario_avaliacao.radioButton90.setChecked(True)
    formulario_avaliacao.radioButton95.setChecked(True)
    formulario_avaliacao.radioButton100.setChecked(True)
    formulario_avaliacao.radioButton105.setChecked(True)
    formulario_avaliacao.radioButton110.setChecked(True)
    formulario_avaliacao.radioButton115.setChecked(True)
    formulario_avaliacao.radioButton120.setChecked(True)
    formulario_avaliacao.radioButton122.setChecked(True)
    formulario_avaliacao.comboBox_2.setCurrentIndex(0)
    formulario_avaliacao.comboBox_3.setCurrentIndex(0)
    formulario_avaliacao.comboBox_4.setCurrentIndex(0)


def limpar_avaliacao_detalhes():
    lista_avaliacao_avaliador.radioButton5.setChecked(True)
    lista_avaliacao_avaliador.radioButton10.setChecked(True)
    lista_avaliacao_avaliador.radioButton15.setChecked(True)
    lista_avaliacao_avaliador.radioButton20.setChecked(True)
    lista_avaliacao_avaliador.radioButton25.setChecked(True)
    lista_avaliacao_avaliador.radioButton30.setChecked(True)
    lista_avaliacao_avaliador.radioButton35.setChecked(True)
    lista_avaliacao_avaliador.radioButton40.setChecked(True)
    lista_avaliacao_avaliador.radioButton45.setChecked(True)
    lista_avaliacao_avaliador.radioButton50.setChecked(True)
    lista_avaliacao_avaliador.radioButton55.setChecked(True)
    lista_avaliacao_avaliador.radioButton60.setChecked(True)
    lista_avaliacao_avaliador.radioButton65.setChecked(True)
    lista_avaliacao_avaliador.radioButton70.setChecked(True)
    lista_avaliacao_avaliador.radioButton75.setChecked(True)
    lista_avaliacao_avaliador.radioButton80.setChecked(True)
    lista_avaliacao_avaliador.radioButton85.setChecked(True)
    lista_avaliacao_avaliador.radioButton90.setChecked(True)
    lista_avaliacao_avaliador.radioButton95.setChecked(True)
    lista_avaliacao_avaliador.radioButton100.setChecked(True)
    lista_avaliacao_avaliador.radioButton105.setChecked(True)
    lista_avaliacao_avaliador.radioButton110.setChecked(True)
    lista_avaliacao_avaliador.radioButton115.setChecked(True)
    lista_avaliacao_avaliador.radioButton120.setChecked(True)
    lista_avaliacao_avaliador.radioButton122.setChecked(True)
    lista_avaliacao_avaliador.comboBox_2.setCurrentIndex(0)
    lista_avaliacao_avaliador.comboBox_3.setCurrentIndex(0)
    lista_avaliacao_avaliador.comboBox_4.setCurrentIndex(0)


def nova_avaliacao():
    # if formulario_avaliacao.radioButton1.isChecked():
    #     formulario_avaliacao.radioButton1.setStyleSheet(
    #         "background-color: black")
 # for s in range(len(buttonGroup,))
    # if formulario_avaliacao.radioButton1.isChecked():
    #      formulario_avaliacao.radioButton1.setStyleSheet(
    #          "background-color: green")
    # incidentes = str(formulario_avaliacao.buttonGroup_25.checkedId())
    # if incidentes =="-3":
    #     incidentes=1
    #     print("Incidente:",incidentes)
    # elif incidentes =="-2":
    #     incidentes=0
    #     print("Não há Incidente:",incidentes)

    q1 = str(formulario_avaliacao.buttonGroup.checkedId())
    if q1 == "-2":
        q1 = 4
        print(q1)

    elif q1 == "-3":
        q1 = 3
        print(q1)

    elif q1 == "-4":
        q1 = 2
        print(q1)
    elif q1 == "-5":
        q1 = 1
        print(q1)
    elif q1 == "-6":
        q1 = 0
        print(q1)
    # QRadioButton:checked{ background-color: red; } QRadioButton:unchecked{ background-color: black; }
        # QMessageBox.about(formulario_avaliacao, "ALERTA","Valor 0 inserido na Questão 1, corrigir ou continuar")
    q2 = str(formulario_avaliacao.buttonGroup_2.checkedId())
    if q2 == "-2":
        q2 = 4
        print(q2)
    elif q2 == "-3":
        q2 = 3
        print(q2)
    elif q2 == "-4":
        q2 = 2
        print(q2)
    elif q2 == "-5":
        q2 = 1
        print(q2)
    elif q2 == "-6":
        q2 = 0
        print(q2)
        # QMessageBox.about(formulario_avaliacao, "ALERTA","Valor 0 inserido na Questão 2, corrigir ou continuar")

    q3 = str(formulario_avaliacao.buttonGroup_3.checkedId())
    if q3 == "-2":
        q3 = 4
        print(q3)
    elif q3 == "-3":
        q3 = 3
        print(q3)
    elif q3 == "-4":
        q3 = 2
        print(q3)
    elif q3 == "-5":
        q3 = 1
        print(q3)
    elif q3 == "-6":
        q3 = 0
        print(q3)
        # QMessageBox.about(formulario_avaliacao, "ALERTA","Valor 0 inserido na Questão 3, corrigir ou continuar")
    q4 = str(formulario_avaliacao.buttonGroup_4.checkedId())
    if q4 == "-2":
        q4 = 4
        print(q4)
    elif q4 == "-3":
        q4 = 3
        print(q4)
    elif q4 == "-4":
        q4 = 2
        print(q4)
    elif q4 == "-5":
        q4 = 1
        print(q4)
    elif q4 == "-6":
        q4 = 0
        print(q4)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 4, corrigir ou continuar")
    q5 = str(formulario_avaliacao.buttonGroup_5.checkedId())
    if q5 == "-2":
        q5 = 4
        print(q5)
    elif q5 == "-3":
        q5 = 3
        print(q5)
    elif q5 == "-4":
        q5 = 2
        print(q5)
    elif q5 == "-5":
        q5 = 1
        print(q5)
    elif q5 == "-6":
        q5 = 0
        print(q5)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 5, corrigir ou continuar")
    q6 = str(formulario_avaliacao.buttonGroup_6.checkedId())
    if q6 == "-2":
        q6 = 4
        print(q6)
    elif q6 == "-3":
        q6 = 3
        print(q6)
    elif q6 == "-4":
        q6 = 2
        print(q6)
    elif q6 == "-5":
        q6 = 1
        print(q6)
    elif q6 == "-6":
        q6 = 0
        print(q6)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 6, corrigir ou continuar")
    q7 = str(formulario_avaliacao.buttonGroup_7.checkedId())
    if q7 == "-2":
        q7 = 4
        print(q7)
    elif q7 == "-3":
        q7 = 3
        print(q7)
    elif q7 == "-4":
        q7 = 2
        print(q7)
    elif q7 == "-5":
        q7 = 1
        print(q7)
    elif q7 == "-6":
        q7 = 0
        print(q7)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 7, corrigir ou continuar")
    q8 = str(formulario_avaliacao.buttonGroup_8.checkedId())
    if q8 == "-2":
        q8 = 4
        print(q8)
    elif q8 == "-3":
        q8 = 3
        print(q8)
    elif q8 == "-4":
        q8 = 2
        print(q8)
    elif q8 == "-5":
        q8 = 1
        print(q8)
    elif q8 == "-6":
        q8 = 0
        print(q8)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 8, corrigir ou continuar")
    q9 = str(formulario_avaliacao.buttonGroup_9.checkedId())
    if q9 == "-2":
        q9 = 4
        print(q9)
    elif q9 == "-3":
        q9 = 3
        print(q9)
    elif q9 == "-4":
        q9 = 2
        print(q9)
    elif q9 == "-5":
        q9 = 1
        print(q9)
    elif q9 == "-6":
        q9 = 0
        print(q9)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 9, corrigir ou continuar")
    q10 = str(formulario_avaliacao.buttonGroup_10.checkedId())
    if q10 == "-2":
        q10 = 4
        print(q10)
    elif q10 == "-3":
        q10 = 3
        print(q10)
    elif q10 == "-4":
        q10 = 2
        print(q10)
    elif q10 == "-5":
        q10 = 1
        print(q10)
    elif q10 == "-6":
        q10 = 0
        print(q10)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 10, corrigir ou continuar")
    q11 = str(formulario_avaliacao.buttonGroup_11.checkedId())
    if q11 == "-2":
        q11 = 4
        print(q11)
    elif q11 == "-3":
        q11 = 3
        print(q11)
    elif q11 == "-4":
        q11 = 2
        print(q11)
    elif q11 == "-5":
        q11 = 1
        print(q11)
    elif q11 == "-6":
        q11 = 0
        print(q11)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 11, corrigir ou continuar")
    q12 = str(formulario_avaliacao.buttonGroup_12.checkedId())
    if q12 == "-2":
        q12 = 4
        print(q12)
    elif q12 == "-3":
        q12 = 3
        print(q12)
    elif q12 == "-4":
        q12 = 2
        print(q12)
    elif q12 == "-5":
        q12 = 1
        print(q12)
    elif q12 == "-6":
        q12 = 0
        print(q12)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 12, corrigir ou continuar")
    q13 = str(formulario_avaliacao.buttonGroup_13.checkedId())
    if q13 == "-2":
        q13 = 4
        print(q13)
    elif q13 == "-3":
        q13 = 3
        print(q13)
    elif q13 == "-4":
        q13 = 2
        print(q13)
    elif q13 == "-5":
        q13 = 1
        print(q13)
    elif q13 == "-6":
        q13 = 0
        print(q13)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 13, corrigir ou continuar")
    q14 = str(formulario_avaliacao.buttonGroup_14.checkedId())
    if q14 == "-2":
        q14 = 4
        print(q14)
    elif q14 == "-3":
        q14 = 3
        print(q14)
    elif q14 == "-4":
        q14 = 2
        print(q14)
    elif q14 == "-5":
        q14 = 1
        print(q14)
    elif q14 == "-6":
        q14 = 0
        print(q14)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 14, corrigir ou continuar")
    q15 = str(formulario_avaliacao.buttonGroup_15.checkedId())
    if q15 == "-2":
        q15 = 4
        print(q15)
    elif q15 == "-3":
        q15 = 3
        print(q15)
    elif q15 == "-4":
        q15 = 2
        print(q15)
    elif q15 == "-5":
        q15 = 1
        print(q15)
    elif q15 == "-6":
        q15 = 0
        print(q15)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 15, corrigir ou continuar")
    q16 = str(formulario_avaliacao.buttonGroup_16.checkedId())
    if q16 == "-2":
        q16 = 4
        print(q16)
    elif q16 == "-3":
        q16 = 3
        print(q16)
    elif q16 == "-4":
        q16 = 2
        print(q16)
    elif q16 == "-5":
        q16 = 1
        print(q16)
    elif q16 == "-6":
        q16 = 0
        print(q16)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 16, corrigir ou continuar")
    q17 = str(formulario_avaliacao.buttonGroup_17.checkedId())
    if q17 == "-2":
        q17 = 4
        print(q17)
    elif q17 == "-3":
        q17 = 3
        print(q17)
    elif q17 == "-4":
        q17 = 2
        print(q17)
    elif q17 == "-5":
        q17 = 1
        print(q17)
    elif q17 == "-6":
        q17 = 0
        print(q17)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 17, corrigir ou continuar")
    q18 = str(formulario_avaliacao.buttonGroup_18.checkedId())
    if q18 == "-2":
        q18 = 4
        print(q18)
    elif q18 == "-3":
        q18 = 3
        print(q18)
    elif q18 == "-4":
        q18 = 2
        print(q18)
    elif q18 == "-5":
        q18 = 1
        print(q18)
    elif q18 == "-6":
        q18 = 0
        print(q18)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 18, corrigir ou continuar")
    q19 = str(formulario_avaliacao.buttonGroup_19.checkedId())
    if q19 == "-2":
        q19 = 4
        print(q19)
    elif q19 == "-3":
        q19 = 3
        print(q19)
    elif q19 == "-4":
        q19 = 2
        print(q19)
    elif q19 == "-5":
        q19 = 1
        print(q19)
    elif q19 == "-6":
        q19 = 0
        print(q19)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 19, corrigir ou continuar")
    q20 = str(formulario_avaliacao.buttonGroup_20.checkedId())
    if q20 == "-2":
        q20 = 4
        print(q20)
    elif q20 == "-3":
        q20 = 3
        print(q20)
    elif q20 == "-4":
        q20 = 2
        print(q20)
    elif q20 == "-5":
        q20 = 1
        print(q20)
    elif q20 == "-6":
        q20 = 0
        print(q20)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 20, corrigir ou continuar")
    q21 = str(formulario_avaliacao.buttonGroup_21.checkedId())
    if q21 == "-2":
        q21 = 4
        print(q21)
    elif q21 == "-3":
        q21 = 3
        print(q21)
    elif q21 == "-4":
        q21 = 2
        print(q21)
    elif q21 == "-5":
        q21 = 1
        print(q21)
    elif q21 == "-6":
        q21 = 0
        print(q21)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 21, corrigir ou continuar")
    q22 = str(formulario_avaliacao.buttonGroup_22.checkedId())
    if q22 == "-2":
        q22 = 4
        print(q22)
    elif q22 == "-3":
        q22 = 3
        print(q22)
    elif q22 == "-4":
        q22 = 2
        print(q22)
    elif q22 == "-5":
        q22 = 1
        print(q22)
    elif q22 == "-6":
        q22 = 0
        print(q22)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 22, corrigir ou continuar")
    q23 = str(formulario_avaliacao.buttonGroup_23.checkedId())
    if q23 == "-2":
        q23 = 4
        print(q23)
    elif q23 == "-3":
        q23 = 3
        print(q23)
    elif q23 == "-4":
        q23 = 2
        print(q23)
    elif q23 == "-5":
        q23 = 1
        print(q23)
    elif q23 == "-6":
        q23 = 0
        print(q23)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 23, corrigir ou continuar")

    q24 = str(formulario_avaliacao.buttonGroup_24.checkedId())
    if q24 == "-2":
        q24 = 4
        print(q24)
    elif q24 == "-3":
        q24 = 3
        print(q24)
    elif q24 == "-4":
        q24 = 2
        print(q24)
    elif q24 == "-5":
        q24 = 1
        print(q24)
    elif q24 == "-6":
        q24 = 0
        print(q24)
        # QMessageBox.about(formulario_avaliacao, "ALERTA",
        # "Valor 0 inserido na Questão 24, corrigir ou continuar")

        # QMessageBox.setStandardButtons(QMessageBox:Yes)
        # QMessageBox.addButton(QMessageBox(formulario_avaliacao, "Alerta", "Continuar")

    tipo_avaliador = StatusAPIUX_avaliador.label_4.text()

    if tipo_avaliador == "Evaluator:":
        # avaliador = StatusAPIUX_avaliador.label_5.text()
        avaliador = formulario_avaliacao.label.text()

        provedor = formulario_avaliacao.comboBox_2.currentText()

        mes = formulario_avaliacao.comboBox_3.currentText()
        mes = int(mes)
        ano = formulario_avaliacao.comboBox_4.currentText()
        ano = int(ano)
    print("nome do avaliador:", avaliador)
    print("nome do provedor:", provedor)
    print("mês:", mes)
    print("ano:", ano)
    cursor = banco.cursor()
    cursor.execute(
        "select k1,k2,k3,rb from provedores where provedor=('%s')" % provedor)

    kn = cursor.fetchall()
    print("kn é:", kn)
    k1 = kn[0][0]
    format(k1, '.3f')
    print("k1 é:", k1)

    k2 = kn[0][1]
    format(k2, '.3f')
    print("k2 é:", k2)

    k3 = kn[0][2]
    format(k3, '.3f')
    print("k3 é:", k3)

    RB = kn[0][3]
    format(RB, '.3f')
    print("RB é:", RB)

    if formulario_avaliacao.radioButton121.isChecked():
        print("Teve incidente neste mês")
        incidentes = 1
        RB = 1  # 13/08
    elif formulario_avaliacao.radioButton122.isChecked():
        print("Não teve incidentes neste mês")
        incidentes = 0
        # RB = 1.1 #13/08
    # data_avaliacao = StatusAPIUX_avaliador.label_3.text()
    # fazer inserçao do tempo no banco de dados por no comboBox puxando do banco depois puxar combobox pra ca
    # tempo2 = StatusAPIUX.label_6.text()

    # tempo2 = tempo2.toString()

    cursor2 = banco.cursor(buffered=True)
    Comando_SQL2 = ("select id from avaliacao_csp where avaliador=('%s') and provedor=('%s') and mes=('%s') and ano =('%s')" % (
        avaliador, provedor, mes, ano))
    cursor2.execute(Comando_SQL2)
    dados_lidos = cursor2.fetchone()
    avaliacaoid_lido = dados_lidos
    print("Id da avaliacao que sera caso necessite substituir:", avaliacaoid_lido)

    # ####VERIFICAR REPETIÇÃO DE AVALIAÇÃO########
    cursor4 = banco.cursor(buffered=True)
    cursor = banco.cursor(buffered=True)

    Comando_SQL4 = ("select mes,ano from avaliacao_csp where avaliador=('%s') and provedor=('%s') and mes=('%s') and ano =('%s')" % (
        avaliador, provedor, mes, ano))
    # Comando_SQL4 = ("select tempoid from avaliacao_csp where avaliadorid=('%s') and provedorid=('%s') and tempoid=('%s')" % (
    #     avaliadorid_lido, provedorid_lido, tempoid_lido))
    # Comando_SQL = (
    #     "select avaliadorid from avaliadores where avaliador=('%s')" % (avaliador,))
    cursor4.execute(Comando_SQL4)
    # cursor.execute(Comando_SQL, (avaliador))
    # 2 avaliadorid_lido = cursor.fetchall()
    # avaliacaoid_lido = cursor4.fetchone()
    # (03,2020) printa a data
    avaliacaotempo_lido = cursor4.fetchone()
    # verificar se já foi feita alguma avaliação
    print("Tempo da avaliacao lida:", avaliacaotempo_lido)
    # for i in range(1, 24):
    #     globals()["q%i" % i] = i
    # print(q1, q2, q3, q4)

    # RB = 1.1
    m = incidentes

    GVij = (q1+q2+q3+q4+q5+q6+q7)/7  # índice para o mês atual
    print("Indíce de Governança:", GVij)
    # GVij = format(GVij, '.2f')

    TPij = (q8+q9+q10+q11+q12+q13+q14)/7
    print("Indíce de Transparência:", TPij)
    # TPij = format(TPij, '.2f')

    SIij = (q15+q16+q17+q18+q19+q20+q21+q22+q23+q24)/10
    print("Indíce de Segurança da Informação:", SIij)
    # SIij = format(SIij, '.2f')

    # dados_lidos = cursor2.fetchone()
    # avaliacaoid_lido = dados_lidos

    # PRÓXIMOS PASSOS, PUXAR DO BD A AVALIAÇÃO DO MÊS ANTERIOR, PRA FAZER A DIFERENÇA DA 2ª PARCELA, ETC
    # IGVj2 = (0.25*(GVij-GVij2))  # atual - média do mês anterior = tendência #where GVij2=mesatual-1
    # print("Parcela 2 da Governança:", IGVj2)

    # # # atual - média dos últimos 12 meses = expectativa
    # # IGVj3 = (0.25*(GVij-GVji[-12/12]))
    # # print("Parcela 3 da Governança:", IGVj3)

    # # IGVj3 = (gvj)

    # # IGVj = ((IGVj1 + IGVj2 + IGVj3) * RB)/2*m

    # # print(IGVj)
    # return funcao_iniciar()
    if q1 or q2 or q3 or q4 or q5 or q6 or q7 or q8 or q9 or q10 or q11 or q12 or q13 or q14 or q15 or q16 or q17 or q18 or q19 or q20 or q21 or q22 or q23 or q24 == 0:
        QMessageBox.about(formulario_avaliacao, "ALERTA",
                          "Valor 0 inserido numa ou mais respostas, corrigir ou continuar")
        resp = QMessageBox.question(
            formulario_avaliacao, 'Continuar?', 'Envie a avaliação.', QMessageBox.Yes | QMessageBox.No)
        if resp == QMessageBox.Yes:
            print("continuando")
            # formulario_avaliacao.close()
            # QMessageBox.about(formulario_avaliacao, "Concluído",
            #                   "Avaliação armazenada com sucesso!")
        else:
            print("Aguardando avaliação ser realizada!")
            return funcao_iniciar()

            # return funcao_iniciar()
    cursor4.close()
    if avaliacaotempo_lido is not None:
        avaliacaotempo_lido = avaliacaotempo_lido[0]
        if avaliacaotempo_lido >= 1:

            QMessageBox.about(formulario_avaliacao, "ALERTA",
                              "Esta avaliação já foi realizada, corrigir a data ou substituir a avaliação:")
            resp = QMessageBox.question(
                formulario_avaliacao, 'Continuar?', 'Substituir a avaliação.', QMessageBox.Yes | QMessageBox.No)
            if resp == QMessageBox.Yes:
                print("Substituindo a avaliação realizada.")
                avaliacaoid_lido = avaliacaoid_lido[0]
                print(
                    "Id da avaliacao que sera caso necessite substituir sem virgula", avaliacaoid_lido)
                # formulario_avaliacao.close()
                cursor2 = banco.cursor()

                cursor2.execute("UPDATE avaliacao_csp SET avaliador=('%s'),provedor=('%s'),mes=('%s'),ano=('%s'),incidentes=('%s'),GVij=('%s'),TPij=('%s'),SIij=('%s'),q1=('%s'), q2=('%s'), q3=('%s'), q4=('%s'), q5=('%s'), q6=('%s'), q7=('%s'), q8=('%s'), q9=('%s'), q10=('%s'), q11=('%s'), q12=('%s'), q13=('%s'), q14=('%s'), q15=('%s'), q16=('%s'), q17=('%s'), q18=('%s'), q19=('%s'), q20=('%s'), q21=('%s'), q22=('%s'), q23=('%s'), q24=('%s') WHERE id=%s" % (
                    (str(avaliador), str(provedor), int(mes), int(ano), int(incidentes), float(GVij), float(TPij), float(SIij), str(q1), str(q2), str(q3), str(q4), str(q5), str(q6), str(q7), str(q8), str(q9), str(q10), str(
                        q11), str(q12), str(q13), str(q14), str(q15), str(q16), str(q17), str(q18), str(q19), str(q20), str(q21), str(q22), str(q23), str(q24), avaliacaoid_lido)))

                banco.commit()
                formulario_avaliacao.close()
                # formulario_avaliacao.destroy()
                limpar_avaliacao()
                return tela_login_dados_avaliador()

            else:
                print("Aguardando avaliação pode ser substituída!")
                return funcao_iniciar()
        # else:
        #     print("Aguardando avaliação ser realizada!")
        #     # return funcao_iniciar()            # return funcao_iniciar()

    cursor = banco.cursor(buffered=True)
    IGVj = 0  # indicadores que serão resultados das operações feitas nas parcelas
    ITPj = 0
    ISIj = 0
    comando_SQL = "INSERT INTO avaliacao_csp (avaliador,provedor,mes,ano,atividade,incidentes,GVij, TPij, SIij,IGVj,ITPj,ISIj, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11, q12, q13, q14, q15, q16, q17, q18, q19, q20, q21, q22, q23, q24) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s, %s, %s,%s, %s, %s,%s, %s, %s,%s, %s, %s,%s, %s, %s,%s, %s, %s,%s, %s, %s,%s, %s)"
    dados = (str(avaliador), str(provedor), int(mes), int(ano), int(1), int(incidentes), float(GVij), float(TPij), float(SIij), IGVj, ITPj, ISIj, str(q1), str(q2), str(q3), str(q4), str(q5), str(q6), str(q7), str(q8), str(q9), str(q10), str(
        q11), str(q12), str(q13), str(q14), str(q15), str(q16), str(q17), str(q18), str(q19), str(q20), str(q21), str(q22), str(q23), str(q24))
    cursor.execute(comando_SQL, dados)

    banco.commit()
    # Teste 08/07
    # formulario_avaliacao.close()
    # # tela_login_sql()
    # limpar_avaliacao()
    # tela_login_dados_avaliador()
    # Fim #Teste 08/07

    # for i in range(1, 24):
    #     globals()["q%i" % i] = i
    # print(q1, q2, q3, q4)
    ###para fazer 2 parcela será necessário acesso ao banco dos indices obre O único mês anterior##
    cursor2 = banco.cursor()
    mes_anterior = mes - 1
    ano2p = ano
    # indicar os valores das variáveis
    # cadastrar as variáveis no BD (provedor)

    # cursor que chamava o k1,k2,k3 estava aqui #13/08

    mes_primario = 0
    # 4,3,2,1,2,2,2
    print("Mês anterior:", mes_anterior)  # GVj-1
    if mes_anterior == 0:
        mes_anterior = 12
        ano2p = ano2p-1
        print("Mês passado está no ano anterior ou é mês primário")

        try:
            Comando_SQL2 = ("select * from avaliacao_csp where avaliador=('%s') and provedor=('%s') and mes=('%s') and ano=('%s')" % (
                avaliador, provedor, mes_anterior, ano2p))
            cursor2.execute(Comando_SQL2)
            dados_lidos = cursor2.fetchall()
            avaliacao = dados_lidos
            print(
                "A avaliação anterior como ano passado deste avaliador com este provedor:", avaliacao)
            GVij2 = avaliacao[0][7]
            print("Indice de Governança como ano passado do mês anterior:", GVij2)
            TPij2 = avaliacao[0][8]
            print("Indice de Transparência como ano passado do mês anterior:", GVij2)
            SIij2 = avaliacao[0][9]
            print(
                "Indice de Segurança da informação como ano passado do mês anterior:", GVij2)

        except IndexError:  # quando não há mês anterior
            # se não foi feito a avaliação do mês anterior? Será tratado como?# Resolver URGENTE
            avaliacao = "null"
            print(
                "Não há avaliação feita no mês anterior do ano passado:", mes_anterior)
            GVij2 = 0
            TPij2 = 0
            SIij2 = 0
            # ou
            mes_primario = 1

    else:
        print("Não está no ano passado")
        try:
            Comando_SQL2 = ("select * from avaliacao_csp where avaliador=('%s') and provedor=('%s') and mes=('%s') and ano=('%s')" % (
                avaliador, provedor, mes_anterior, ano2p))
            cursor2.execute(Comando_SQL2)
            dados_lidos = cursor2.fetchall()
            avaliacao = dados_lidos
            GVij2 = avaliacao[0][7]
            print("Indice de Governança do mês anterior:", GVij2)
            TPij2 = avaliacao[0][8]
            print("Indice de Transparência do mês anterior:", GVij2)
            SIij2 = avaliacao[0][9]
            print("Indice de Segurança da informação do mês anterior:", GVij2)
        except IndexError:  # quando não há mês anterior
            # se não foi feito a avaliação do mês anterior? Será tratado como?# Resolver URGENTE
            avaliacao = "null"
            print("Não há avaliação feita no mês anterior:", mes_anterior)
            GVij2 = 0
            TPij2 = 0
            SIij2 = 0
            mes_primario = 1

    # if mes_anterior != 0:

    # floatao = 2.151212112
    # print("Floatao é:%.2f" % (floatao))

    IGVj1 = GVij*k1  # primeira parcela
    print("Parcela 1 da Governança: %.3f" % IGVj1)

    IGVj2 = (k2*(GVij-GVij2))
    print("A 2ª parcela da Governança é: %.3f" % IGVj2)

    ITPj1 = (TPij)*k1  # primeira parcela
    print("Parcela 1 da Transparência: %.3f" % ITPj1)

    ITPj2 = (k2*(TPij-TPij2))
    print("A 2ª parcela da Transparência é: %.3f" % ITPj2)

    ISIj1 = (SIij)*k1  # primeira parcela
    print("Parcela 1 da Segurança da Informação: %.3f" % ISIj1)

    ISIj2 = (k2*(SIij-SIij2))
    print("A 2ª parcela da Segurança da Informação é: %.3f" % ISIj2)

    ###Terceira parcela precisa da média dos últimos 12 indices###
    #O limite do mês é o mês atual, o ínicio são 11 meses atras#
    # GVij12 = (GVij + GVij2 + GVij3 + GVij4 + GVij4 + GVij5 + GVij6 + GVij7 + GVij8 + GVij9 + GVij10 + GVij11 + GVij12) / 12
    # # # atual - média dos últimos 12 meses = expectativa
    mes_ano = 12
    # comando_SQL = ("select * from avaliacao_csp where avaliador=('%s') and provedor=('%s') and mes=('%s') and ano=('%s')" % (avaliador, provedor, mes_atual, ano))
    mes_atual = mes
    mes_anterior12 = mes_atual-12
    ano_atual = ano
    print("Ano atual é:", ano_atual)
    if mes_anterior12 <= 0:
        mes_anterior12 = mes_anterior12*-1  # deixar positivo
        mes_anterior12 = mes_ano-mes_anterior12
        print("12 meses atrás é:", mes_anterior12)
        ano_anterior = ano - 1
    ####buscando as avaliações dentre 1 ano####
    # Antes estava pegando o mês atual, o que dava 13 resultados pra fazer a média, sendo que pra 3ª parcela, preciso da média dos últimos 12 pra subtrair do atual
    # comando_SQL = ("select * from avaliacao_csp where avaliador=('%s') and provedor=('%s') and mes<=('%s') and ano=('%s') UNION select * from avaliacao_csp where avaliador = ('%s') and provedor = ('%s') and mes>=('%s') and ano=('%s')" %
    #                (avaliador, provedor, mes_atual, ano_atual, avaliador, provedor, mes_anterior12, ano_anterior))
    comando_SQL = ("select * from avaliacao_csp where avaliador=('%s') and provedor=('%s') and mes<=('%s') and ano=('%s') UNION select * from avaliacao_csp where avaliador = ('%s') and provedor = ('%s') and mes>('%s') and ano=('%s')" %
                   (avaliador, provedor, mes_atual, ano_atual, avaliador, provedor, mes_anterior12, ano_anterior))

    cursor.execute(comando_SQL)
    dados_listados = cursor.fetchall()
    print("Abaixo avaliações feitas nos 12 meses da 3ª parcela:")
    print(dados_listados)
    counter = 0
    GVij12_soma = 0
    TPij12_soma = 0
    SIij12_soma = 0
    # vai rodando de 1 em 1 pela quantidade de avaliações

    for s in range(len(dados_listados,)):
        # if dados_lidos[s][0] != dados_lidos[s][0]:
        # print(dados_lidos[s])

        GVij12 = dados_listados[s][7]  # vai pegando o GVij de cada avaliação
        print("Instâncias de Indices Governança:", GVij12)
        GVij12_soma = GVij12_soma+GVij12  # soma o GVij de cada avaliação
        print("Instâncias de Indices Governança para fazer a média...:", GVij12_soma)

        TPij12 = dados_listados[s][8]
        print("Instâncias de Indices Transparência:", TPij12)
        TPij12_soma = TPij12_soma+TPij12
        print("Instâncias de Indices Transparência para fazer a média...:", TPij12_soma)

        SIij12 = dados_listados[s][9]
        print("Instâncias de Indices Segurança da Informação:", SIij12)
        SIij12_soma = SIij12_soma+SIij12
        print("Instâncias de Indices Segurança da Informação para fazer a média...:", SIij12_soma)
        print("")
        counter = counter+1
        print("Houve", counter, "avaliações nos últimos 12 meses")
    # fazendo as avaliações que já teve, ele divide por quantas teve

    try:
        GVij12 = GVij12_soma/counter  # se for o primeiro mês como não teve nenhuma avaliação
    except ZeroDivisionError:
        GVij12 = 1
        print("Alocando valor para primeiro mês de Governança na 3ª parcela:", GVij12)
    # o 12 poderia ser substuído pela quantidade de meses que realmente foi realizada até agora, como na counter
    # GVij12 = GVij12_soma/12
    # GVij12 = format(GVij12, '.2f')  # 12/07
    print("A média das instâncias de Indices sobre a Governança nos 12 meses:", GVij12)

    # IGVj3 = float(k3*(GVij12))
    IGVj3 = (k3*(GVij12))
    print("Parcela 3 da Governança:", IGVj3)

    IGVj = (((IGVj1 + IGVj2 + IGVj3) * RB)/(2**m))
    print("Indicador de confiança Governança:", IGVj)

    # TPij12 = TPij12_soma/12
    try:
        TPij12 = TPij12_soma/counter  # se for o primeiro mês como não teve nenhuma avaliação
    except ZeroDivisionError:
        TPij12 = 1
        print("Alocando valor para primeiro mês de Governança na 3ª parcela:", TPij12)

    print("A média das instâncias de Indices sobre a Transparência nos dos 12 meses:", TPij12)

    ITPj3 = (k3*(TPij12))
    print("Parcela 3 da Transparência:", ITPj3)

    ITPj = (((ITPj1 + ITPj2 + ITPj3) * RB)/(2**m))
    print("Indicador de confiança Transparência:", ITPj)

    # SIij12 = SIij12_soma/12
    try:
        SIij12 = SIij12_soma/counter  # se for o primeiro mês como não teve nenhuma avaliação
    except ZeroDivisionError:
        SIij12 = 1
        print("Alocando valor para primeiro mês de Governança na 3ª parcela:", SIij12)

    print("A média das instâncias de Indices sobre a Segurança da Informação nos dos 12 meses:", SIij12)

    ISIj3 = (k3*(SIij12))
    print("Parcela 3 da Segurança da Informação:", ISIj3)

    ISIj = (((ISIj1 + ISIj2 + ISIj3) * RB)/(2**m))
    print("Indicador de confiança Segurança da Informação:", ISIj)

    IGVj = format(IGVj, '.3f')
    ITPj = format(ITPj, '.3f')
    ISIj = format(ISIj, '.3f')
    if mes_primario == 1:
        # IGVj = 0
        # ITPj = 0
        # ISIj = 0
        # print("É mês primário, valores dos indicadores zerados")
        print("É mês primário")
    else:
        print("Não é mês primário")

    cursor.execute("UPDATE avaliacao_csp SET IGVj=('%s'), ITPj=('%s'),ISIj=('%s') WHERE avaliador=('%s') and provedor=('%s') and mes=('%s') and ano=('%s')" % (
        float(IGVj), float(ITPj), float(ISIj), str(avaliador), str(provedor), int(mes), int(ano)))
    banco.commit()

    formulario_avaliacao.close()
    # tela_login_sql()
    limpar_avaliacao()
    tela_login_dados_avaliador()

# Mês: 1
# 4321222 = 16
# 1234333 = 19
# 4321123411 = 22
# incidentes=1
# Mês: 2
# 2221234 = 16
# 3334321 = 19
# 1143211234 = 22
# incidentes=0
# ...
# Mês ímpares tem incidentes
# De um mês para o outro inverte a repetição

# Mês: 1
# 4321222 = 16
# 1234333 = 19
# 4321123411 = 22
# incidentes=0
# #Mês:2
# 4321322 = 17
# 1224332 = 17
# 4322223411 = 24
# incidentes=0
# #Mês:3
# 4321323 = 18
# 1224334 = 19
# 4332223411 = 24
# incidentes=0
# #Mês:4
# 4321323 = 18
# 1224334 = 19
# 4331113411 = 21
# incidentes=1
# A cada 4 meses incidentes
# #Mês:5
# 4322323 = 19
# 3224334 = 20
# 4332223411 = 21
# incidentes=0
# #Mês:6
# 4322324 = 20
# 3224334 = 20
# 4332223411 = 21
# #Mês:7
# 2122324 = 16
# 3122334 = 17
# 4332223411 = 21
# incidentes=0
# #Mês:8
# 2122322 = 14
# 3122332 = 15
# 2332223211 = 17
# incidentes=1
# A cada 4 meses incidentes
# #Mês:9
# 3122323 = 16
# 4122332 = 16
# 2332223222 = 19
# incidentes=0
# #Mês:10
# 3222323 = 17
# 4022332 = 15
# 2332223222 = 19
# incidentes=0
# #Mês:11
# 3222324 = 18
# 4022333 = 16
# 2332223223 = 20
# incidentes=0
# #Mês:12
# 1222324 = 16
# 2022333 = 14
# 2331113223 = 17
# incidentes=1
# A cada 4 meses incidentes
# #Mês:01/2021
# 2322324 = 18
# 2222333 = 16
# 2332213223 = 19
# incidentes=0
# #Mês:02/2021
# 2322324 = 18
# 2222333 = 16
# 2332223223 = 20
# incidentes=0
# #Mês:03/2021
# 2312324 = 17
# 1222333 = 15
# 1332223223 = 19
# incidentes=0
# #Mês:04/2021
# 2312324 = 17
# 1212333 = 14
# 1331113223 = 16
# incidentes=1
# A cada 4 meses incidentes


def tela_login_sql():
    limpar_dados()

    today = date.today()
    # print("d1 =", d1)
    cursor = banco.cursor()
    # tela_login.lineEdit_2.setechoMode(PasswordEchoOnEdit)
    username = tela_login.lineEdit.text()
    password = tela_login.lineEdit_2.text()
    StatusAPIUX.label_1.setText(str(username))

    Comando_SQL = (
        "select * from avaliadores where avaliadorusr=('%s')" % (username,))

    cursor.execute(Comando_SQL)
    dados_lidos = cursor.fetchall()
    try:
        avaliadorpw = dados_lidos[0][3]
        salt = dados_lidos[0][6]
        # letters = string.ascii_letters
        # salt = (''.join(random.choice(letters) for i in range(10)))
        # print("Salt gerado para senha:", salt)
        password = hashlib.sha512((password+salt).encode('utf-8')).hexdigest()
        print("Senha criptografada e com salt para usuário entrar é:", password)
    # password = hashlib.sha512(password).encode('utf-8').hexdigest()
    except IndexError:
        print("senha errada")

    # tela_login_cadastro.label_7.setText(str(username))
    # if gestor=1
    # StatusAPIUX_avaliador.label_3.setText(d1)

    # Comando_SQL = "select * from avaliadores where avaliadorusr=%s and avaliadorpw=%s and gestor=0 and atividade=1"
    Comando_SQL = "select * from avaliadores where avaliadorusr=%s and avaliadorpw=%s and gestor=0"
    # dados_lidos=cursor.fetchall()
    # data = cursor.execute(Comando_SQL, (username, password))
    cursor.execute(Comando_SQL, (username, password))
    dados_lidos = cursor.fetchall()
    if(len(dados_lidos) > 0):
        QMessageBox.about(tela_login, "ALERTA",
                          "Usuário encontrado!")
        avaliadorid = (str(dados_lidos[0][0]))
        print("avaliador id é:", avaliadorid)
        formulario_avaliacao.label_2.setText(avaliadorid)
        # 5 no banco de dados é pra verificar se é gestor
        atividade = (str(dados_lidos[0][4]))
        print("Se o cadastro do avaliador está ativo 1(sim) 0(não):", atividade)
        if atividade == "1":
            # Comando_SQL = ("select avaliador from avaliadores where avaliadorusr=('%s')" % (username,))
            # cursor.execute(Comando_SQL)
            # avaliador = cursor.fetchone()
            # avaliador = avaliador[0]
            avaliador = (str(dados_lidos[0][1]))
            StatusAPIUX_avaliador.label_1.setText(str(avaliador))
            #############USUÁRIO ENCONTRADO SÓ PODE VER PRÓPRIO USUÁRIO###########################

            tela_login_dados_avaliador()
        else:
            QMessageBox.about(tela_login, "ALERTA",
                              "Usuário com PERFIL DESATIVADO!")
            tela_login.show()
            return

    Comando_SQL = "select avaliador from avaliadores where avaliadorusr=%s and avaliadorpw=%s and gestor=1"
    # dados_lidos=cursor.fetchall()
    # data = cursor.execute(Comando_SQL, (username, password))
    cursor.execute(Comando_SQL, (username, password))
    dados_lidos = cursor.fetchall()
    if(len(dados_lidos) > 0):
        QMessageBox.about(tela_login, "ALERTA",
                          "Gestor encontrado")
        dados_lidos = dados_lidos[0][0]
        # print("nome do gestor é:"+dados_lidos)

        # StatusAPIUX.comboBox.clear()
        # StatusAPIUX.comboBox_2.clear()
        # StatusAPIUX.comboBox_3.clear()
        # StatusAPIUX.comboBox_4.clear()
        StatusAPIUX.label_4.setText("Manager:")
        # StatusAPIUX.label_2.setText(dados_lidos)
        # listar_dados()
        tela_login_dados()

    Comando_SQL = "select * from avaliadores where avaliadorusr=%s and avaliadorpw=%s"
    # dados_lidos=cursor.fetchall()
    # data = cursor.execute(Comando_SQL, (username, password))
    cursor.execute(Comando_SQL, (username, password))
    dados_lidos = cursor.fetchall()
    if(len(dados_lidos) == 0):  # ==0 NÃO TEM USUÁRIO
        QMessageBox.about(tela_login, "ALERTA",
                          "Usuário ou Senha Incorreta!")

        tela_login.show()
        return
    # else:
    #     QMessageBox.about(tela_login, "ALERTA",
    #                       "Usuário não encontrado")
    #     # tela_login_sql() #loop infinito

    Comando_SQL2 = "select provedor from provedores where atividade=1"
    cursor2 = banco.cursor()
    cursor2.execute(Comando_SQL2)
    dados_lidos2 = cursor2.fetchall()
    for s in range(len(dados_lidos2,)):

        print(dados_lidos2[s])

        # StatusAPIUX.comboBox_2.addItem(str(dados_lidos2[s][0]))
        # StatusAPIUX_avaliador.comboBox_2.addItem(str(dados_lidos2[s][0]))
        formulario_avaliacao.comboBox_2.addItem(str(dados_lidos2[s][0]))

        banco.commit()
        # cursor.close()

    dados_lidos = ""
    cursor.close()
    # StatusAPIUX.comboBox_3.clearEditText()
    # StatusAPIUX_avaliador.comboBox_3.clearEditText()


class ListWidget(QListWidgetItem):
    def __lt__(self, other):
        try:
            print(self.text()), float(other.text())
            return float(self.text()) < float(other.text())
        except:
            return QListWidgetItem.__lt__(self, other)


def tela_login_dados():
    cursor = banco.cursor()
    # cursor2 = banco.cursor()
    username = tela_login.lineEdit.text()
    print(username)
    comando_SQL = "SELECT * FROM avaliacao_csp order by provedor, ano, mes"
    cursor.execute(comando_SQL)
    dados_lidos2 = cursor.fetchall()
    print(dados_lidos2)
    StatusAPIUX.tableWidget.setSortingEnabled(False)
    StatusAPIUX.tableWidget.setRowCount(len(dados_lidos2))
    StatusAPIUX.tableWidget.setColumnCount(5)
    # sorted(dados_lidos2, key=int)
    # dados_lidos2 = [int(x) for x in dados_lidos2]
    # dados_lidos2 = dados_lidos2(map(int, dados_lidos2))
    print("Foi aqui!!!!")
    # dados_lidos2.sorted()
    # print("Foi até aqui!!!!")

    # dados_lidos2 = natsorted(dados_lidos2)
    # print("ÉEEEEEEEEEEEOQQQQQQQQQQQQQQQQQQ", natsorted(dados_lidos2))
    # dados_lidos2 = sorted(dados_lidos2)
    # edados_lidos2 = natsorted(dados_lidos2)
    x = 0
    y = 3
    z = 4
    for i in range(0, len(dados_lidos2)):
        for j in range(0, 5):

            StatusAPIUX.tableWidget.setItem(
                i, j, QtWidgets.QTableWidgetItem(str(dados_lidos2[i][j])))

            # StatusAPIUX.tableWidget.setItem(
            #     0, 4, QtWidgets.QTableWidgetItem(str(dados_lidos2[x][z])))

        # print(dados_lidos2[x][z])

            # print("Mês", int(dados_lidos2[0][3]))
            # print("Ano:", int(dados_lidos2[0][4]))

            # print("Mês", int(dados_lidos2[1][3]))
            # print("Ano:", int(dados_lidos2[1][4]))
            # print("Mês", int(dados_lidos2[2][3]))
            # print("Ano:", int(dados_lidos2[2][4]))

    # StatusAPIUX.tableWidget.setSortingEnabled(True)
    # StatusAPIUX.tableWidget.sortByColumn(3, Qt.AscendingOrder)

    # ui.tableWidget->sortByColumn(2, Qt::AscendingOrder);

    StatusAPIUX.show()


def tela_login_dados_avaliador():
    username = tela_login.lineEdit.text()
    cursor = banco.cursor()
    Comando_SQL = (
        "select avaliador from avaliadores where avaliadorusr=('%s')" % (username,))
    # Comando_SQL = (
    # 17/05 "select avaliador, avaliadorid from avaliadores where avaliadorusr=('%s')" % (username,))
    cursor.execute(Comando_SQL)
    dados_lidos = cursor.fetchall()
    for s in range(len(dados_lidos,)):
        # if dados_lidos[s][0] != dados_lidos[s][0]:
        print(dados_lidos[s])

        avaliador = dados_lidos[s][0]
        # 17/05 avaliadorid = dados_lidos[s][1]
        formulario_avaliacao.label.setText(avaliador)
        StatusAPIUX.tableWidget.setSortingEnabled(False)

        comando_SQL = (
            "SELECT provedor,mes,ano,IGVj,ITPj,ISIj FROM avaliacao_csp where avaliador=('%s') order by provedor,ano,mes" % (avaliador,))
        cursor.execute(comando_SQL)
        dados_listados = cursor.fetchall()
        print("Dados listados que são apresentados na tabela:", dados_listados)
        StatusAPIUX_avaliador.tableWidget.setRowCount(len(dados_listados))
        StatusAPIUX_avaliador.tableWidget.setColumnCount(6)
        x = []
        y = []
        z = []
        a = []
        StatusAPIUX_avaliador.graphicsView.setTitle("Assessment")
        StatusAPIUX_avaliador.graphicsView.setLabel(
            'bottom', 'Month')
        StatusAPIUX_avaliador.graphicsView.setLabel(
            'left', 'Indicators')
        for i in range(0, len(dados_listados)):
            for j in range(0, 6):
                StatusAPIUX_avaliador.tableWidget.setItem(
                    i, j, QtWidgets.QTableWidgetItem(str(dados_listados[i][j])))

            provedor = dados_listados[i][0]
            mes = dados_listados[i][1]
            ano = dados_listados[i][2]
            IGVj = dados_listados[i][3]
            ITPj = dados_listados[i][4]
            ISIj = dados_listados[i][5]
            print("i é", i)
            print("provedor da tabela:", provedor)
            print("mês da tabela:", mes)
            print("ano da tabela:", ano)
            print("IGVj da tabela:", IGVj)
            print("ITPj da tabela:", ITPj)
            print("ISIj da tabela:", ISIj)
            #mes = [1, 2, 3, 4]
            #IGVj = [2.2, 3.1, 3.5, 2.1]
            xx = mes
            yy = IGVj
            zz = ITPj
            aa = ISIj
            #x = mes

            x.append(xx)

            y.append(yy)

            z.append(zz)

            a.append(aa)

            #y = IGVj
            #x = x[i]
            #y = y[i]
            #n = IGVj
            #y = y[k]
            # y.append(n)
            #x = float(xx)
            #y = float(y)
            print("X é:", x)
            print("Y é:", y)
            print("Z é:", z)
            print("A é:", a)
            #print("N é: ", n)
        StatusAPIUX_avaliador.graphicsView.addLegend(offset=-90)
        StatusAPIUX_avaliador.graphicsView.addLegend()
        StatusAPIUX_avaliador.graphicsView.addLegend()
        pen = pg.mkPen(color=(255, 0, 0))
        StatusAPIUX_avaliador.graphicsView.plot(
            x, y, name="IGVj", pen=pen, symbol='+')

        pen2 = pg.mkPen(color=(0, 255, 0))
        StatusAPIUX_avaliador.graphicsView.plot(
            x, z, name="ITPj", pen=pen2, symbol='+')

        pen3 = pg.mkPen(color=(0, 0, 255))
        StatusAPIUX_avaliador.graphicsView.plot(
            x, a, name="ISIj", pen=pen3, symbol='+')

        banco.commit()

        StatusAPIUX_avaliador.label_4.setText("Evaluator:")
        StatusAPIUX_avaliador.show()

        # Graph externo
        # plt = pg.plot()
        # plt.setLabel('bottom', 'Sequentially Generated Values')
        # plt.setLabel('left', 'Randomly Generated Values')
        # #teste = [1, 2, 3, 4, 5]
        # for i in range(0, 4):
        #     n = random.uniform(0, 4)
        # plt.setXRange(0, 12)
        # plt.setYRange(0, 4)
        # plt.setTitle("Simple Line Graph")
        # line = plt.plot(x, y)

        # x = np.arange(1000)
        # y = np.random.normal(size=(3, 1000))
        # fim graph externo

        # for i in range(3):
        # StatusAPIUX_avaliador.graphicsView.plot(x, y)
        #     #StatusAPIUX_avaliador.graphicsView.plot(x, y[i], pen=(i, 3))

        StatusAPIUX_avaliador.graphicsView.showGrid(x=True, y=True)
        #StatusAPIUX_avaliador.graphicsView.setXRange(0, 12, padding=0)
        #StatusAPIUX_avaliador.graphicsView.setYRange(0, 4)

       # StatusAPIUX_avaliador.graphicsView.plot(x, y, pen=(i, 3))


def cadastro_avaliador():
    cursor = banco.cursor()
    tela_cadastro_avaliador.show()
    comando_SQL = ("select * from avaliadores")
    cursor.execute(comando_SQL)
    # avaliadorid_lido = cursor.fetchall()
    # avaliadorid_lido = avaliadorid_lido[0][0]
    dados_lidos = cursor.fetchall()
    ###tela cadastro avaliador###
    tela_cadastro_avaliador.tableWidget.setRowCount(len(dados_lidos))
    tela_cadastro_avaliador.tableWidget.setColumnCount(5)
    senha = "****"
    for i in range(0, len(dados_lidos)):
        for j in range(0, 5):
            tela_cadastro_avaliador.tableWidget.setItem(
                i, j, QtWidgets.QTableWidgetItem(str(dados_lidos[i][j])))
            tela_cadastro_avaliador.tableWidget.setItem(
                i, 3, QtWidgets.QTableWidgetItem(senha))
            item = tela_cadastro_avaliador.tableWidget.item(i, 0)
            flags = item.flags()
            flags &= ~(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEditable)
            item.setFlags(flags)

            item = tela_cadastro_avaliador.tableWidget.item(i, 3)
            flags = item.flags()
            flags &= ~(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEditable)
            item.setFlags(flags)

    ###tela exclusao avaliador###
    cursor = banco.cursor()
    comando_SQL = ("select * from avaliadores")
    cursor.execute(comando_SQL)
    dados_lidos = cursor.fetchall()


def cadastro_provedor():
    cursor = banco.cursor()
    tela_cadastro_provedor.show()
    comando_SQL = ("select * from provedores")
    cursor.execute(comando_SQL)
    # avaliadorid_lido = cursor.fetchall()
    # avaliadorid_lido = avaliadorid_lido[0][0]
    dados_lidos = cursor.fetchall()
    #####tela cadastro provedor####
    tela_cadastro_provedor.tableWidget.setRowCount(len(dados_lidos))
    tela_cadastro_provedor.tableWidget.setColumnCount(3)
    for i in range(0, len(dados_lidos)):
        for j in range(0, 3):
            tela_cadastro_provedor.tableWidget.setItem(
                i, j, QtWidgets.QTableWidgetItem(str(dados_lidos[i][j])))

            tela_cadastro_provedor.tableWidget.setItem(
                i, j, QtWidgets.QTableWidgetItem(str(dados_lidos[i][j])))
            item = tela_cadastro_provedor.tableWidget.item(i, 0)
            flags = item.flags()
            flags &= ~(QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEditable)
            item.setFlags(flags)
    ####tela exclusão de provedor####
    cursor = banco.cursor()
    comando_SQL = ("select * from provedores")
    cursor.execute(comando_SQL)
    dados_lidos = cursor.fetchall()


def cadastro_excluir_provedor():
    linha2 = tela_cadastro_provedor.tableWidget.currentRow()

    linha = linha2
    print("Linha do provedor que será excluida:", linha)
    cursor = banco.cursor()
    comando_SQL = ("SELECT * FROM provedores")
    cursor.execute(comando_SQL)
    dados_lidos = cursor.fetchall()
    # # pegou todos que tem este id do provedor, entao
    valor_id = dados_lidos[linha][0]
    print(valor_id)

    cursor.execute(
        "UPDATE provedores SET atividade = (%s) WHERE provedorid=(%s)""" % (0, valor_id,))
    #         cur.execute(sql,(x,name))
    #         db.commit()

    banco.commit()
    QMessageBox.about(tela_cadastro_provedor, "ALERT",
                      "Provedor INATIVADO com sucesso!")

    cadastro_provedor()


def cadastro_inserir_avaliador():

    avaliador = [tela_cadastro_avaliador.tableWidget_2.item(
        row, 0)for row in range(tela_cadastro_avaliador.tableWidget_2.rowCount())]
    avaliadorusr = [tela_cadastro_avaliador.tableWidget_2.item(
        row, 1) for row in range(tela_cadastro_avaliador.tableWidget_2.rowCount())]
    avaliadorpw = [tela_cadastro_avaliador.tableWidget_2.item(
        row, 2) for row in range(tela_cadastro_avaliador.tableWidget_2.rowCount())]
    atividade = [tela_cadastro_avaliador.tableWidget_2.item(
        row, 3) for row in range(tela_cadastro_avaliador.tableWidget_2.rowCount())]

    avaliador = avaliador[0]
    avaliadorusr = avaliadorusr[0]
    avaliadorpw = avaliadorpw[0]
    atividade = atividade[0]

    if avaliador is None:
        QMessageBox.about(tela_cadastro_avaliador, "ALERTA",
                          "Avaliador não pode ser vazio, corrigir a avaliação:")
        print("Nome do avaliador pra ser inserido:", avaliador)
        return
    if avaliadorusr is None:
        QMessageBox.about(tela_cadastro_avaliador, "ALERTA",
                          "Usuario não pode ser vazio, corrigir a avaliação:")
        print("Nome do usuário pra ser inserido:", avaliadorusr)
        return
    if avaliadorpw is None:
        QMessageBox.about(tela_cadastro_avaliador, "ALERTA",
                          "Senha não pode ser vazio, corrigir a avaliação:")
        print("Senha do avaliador pra ser inserida:", avaliadorpw)
        return
    if atividade is None:
        QMessageBox.about(tela_cadastro_avaliador, "ALERTA",
                          "Atividade não pode ser vazio, corrigir a avaliação:")
        print("Está ativo:1 ou desativado:0 ", atividade)
        return

    try:
        avaliador = [tela_cadastro_avaliador.tableWidget_2.item(
            row, 0).text() for row in range(tela_cadastro_avaliador.tableWidget_2.rowCount())]
        avaliadorusr = [tela_cadastro_avaliador.tableWidget_2.item(
            row, 1).text() for row in range(tela_cadastro_avaliador.tableWidget_2.rowCount())]
        avaliadorpw = [tela_cadastro_avaliador.tableWidget_2.item(
            row, 2).text() for row in range(tela_cadastro_avaliador.tableWidget_2.rowCount())]
        atividade = [tela_cadastro_avaliador.tableWidget_2.item(
            row, 3).text() for row in range(tela_cadastro_avaliador.tableWidget_2.rowCount())]
        cursor = banco.cursor()
        avaliadorpw = avaliadorpw[0]
        # print(avaliadorpw)
        # # avaliadorpw = hashlib.md5(avaliadorpw.encode('utf-8')).hexdigest()
        # print(avaliadorpw)
        # print(hashlib.md5(avaliadorpw.encode('utf-8')).hexdigest())

        letters = string.ascii_letters
        salt = (''.join(random.choice(letters) for i in range(10)))
        print("Salt gerado para senha:", salt)
        # saltao = hashlib.sha512((avaliadorpw+salt).encode('utf-8')).hexdigest()
        avaliadorpw = hashlib.sha512(
            (avaliadorpw+salt).encode('utf-8')).hexdigest()
        print("Senha criptografada e com salt:", avaliadorpw)

        # # FAZENDO SEQUENCIA PRA PREENCHER BANCO DE DADOS#
        # from numpy.random import seed
        # from numpy.random import shuffle
        # from numpy.random import randint
        # i = 1
        # while i < 19:
        #     values_random = randint(0, 5, 24)
        #     # valores = [values]
        #     values = str(values_random)
        #     # print(values)

        #     # print(re.findall(r'\d+', values))

        #     values2 = values.strip("[]").split(" ")

        #     # print(values)
        #     print(values2)
        #     i = i+1

        cursor.execute("insert into avaliadores(avaliador, avaliadorusr, avaliadorpw, atividade,gestor,salt)" "VALUES('%s','%s','%s','%s',0,'%s')" %
                       (''.join(avaliador),
                        ''.join(avaliadorusr),
                        ''.join(avaliadorpw),
                        ''.join(atividade),
                        ''.join(salt)))

        print("dados inseridos com sucesso! Avaliador Criado!")
        QMessageBox.about(tela_cadastro_avaliador, "ALERTA",
                          "Avaliador criado com sucesso!")
        banco.commit()
        cadastro_avaliador()
        #Limpando após a inserção do avaliador#
        for i in range(0, 1):
            for j in range(0, 4):

                tela_cadastro_avaliador.tableWidget_2.setItem(
                    i, j, QtWidgets.QTableWidgetItem(""))
        print("Limpando cadastro de avaliador")
    except:
        QMessageBox.about(tela_cadastro_avaliador, "ALERTA",
                          "Este avaliador já foi criado")
        #Limpando após a inserção da avaliador#
        print("Limpando cadastro de avaliador criado")


def cadastro_excluir_avaliador():
    linha2 = tela_cadastro_avaliador.tableWidget.currentRow()

    linha = linha2
    print("Linha do provedor que será excluida:", linha)
    cursor = banco.cursor()
    comando_SQL = ("SELECT * FROM avaliadores")
    cursor.execute(comando_SQL)
    dados_lidos = cursor.fetchall()
    # # pegou todos que tem este id do provedor, entao
    valor_id = dados_lidos[linha][0]
    print(valor_id)
    # cursor = banco.cursor()
    # comando_SQL = (
    #     "SELECT id FROM avaliacao_csp where avaliador=('%s')" % (avaliador,))
    # cursor.execute(comando_SQL)
    # dados_lidos = cursor.fetchall()
    # # pegou todos que tem este id do avaliador, entao
    # valor_id = dados_lidos[linha2][0]

    # dados = valor_id
    # print("ID da linha que será removida do avaliador:", valor_id)

    cursor.execute(
        "UPDATE avaliadores SET atividade = (%s) WHERE avaliadorid=(%s)""" % (0, valor_id,))
    #         cur.execute(sql,(x,name))
    #         db.commit()

    banco.commit()
    QMessageBox.about(tela_cadastro_avaliador, "ALERT",
                      "Avaliador INATIVADO com sucesso!")

    cadastro_avaliador()


def detalhes_avaliador():
    # avaliador = StatusAPIUX_avaliador.label_5.text()
    # avaliador = formulario_avaliacao.label_5.text()
    # username = tela_login.lineEdit.text()
    avaliadorusr = tela_login.lineEdit.text()
    cursor = banco.cursor()
    cursor2 = banco.cursor()
    cursor3 = banco.cursor()
    limpar_avaliacao_detalhes()
    lista_avaliacao_avaliador.show()

    # 17/05 comando_SQL = ("select avaliadorid from avaliadores where avaliadorusr=('%s')" % (avaliadorusr,))
    comando_SQL = (
        "select avaliador from avaliadores where avaliadorusr=('%s')" % (avaliadorusr,))
    cursor.execute(comando_SQL)
    #  # 17/05 avaliadorid_lido = cursor.fetchall()
    #  # 17/05 avaliadorid_lido = avaliadorid_lido[0][0]
    #  # 17/05 avaliadorid = avaliadorid_lido
    avaliador_lido = cursor.fetchall()
    avaliador_lido = avaliador_lido[0][0]
    avaliador = avaliador_lido

    # 17/05 print("Avaliador ID lido do nome do usuário:", avaliadorid_lido)
    print("Avaliador lido do nome do usuário:", avaliador)
    # avaliadorid_lido = (int(avaliadorid_lido))
    # cursor = banco.cursor()
    # banco.commit() 17/05

    # 17/05

    # comando_SQL2 = (
    #     "SELECT * FROM avaliacao_csp where avaliadorid=('%s')" % (avaliadorid,))
    # cursor2.execute(comando_SQL2)
    # dados_lidos = cursor2.fetchall()
    # print("Encontrando as avaliações deste avaliador:" % dados_lidos)

    ######DETALHES##########
    # para fazer a ordenação, sort, tanto na alimentação quanto no acesso fiz order pela chamada no banco e então populado
    cursor = banco.cursor()
    cursor.execute("SELECT * FROM avaliacao_csp")
    dados_lidos = cursor.fetchall()
    linha = StatusAPIUX_avaliador.tableWidget.currentRow()
    try:
        comando_SQL2 = (
            "SELECT * FROM avaliacao_csp where avaliador=('%s') order by provedor,ano,mes" % (avaliador,))
        cursor2.execute(comando_SQL2)
        dados_lidos = cursor2.fetchall()
        print("Encontrando as avaliações deste avaliador:", dados_lidos)
        valor_id = dados_lidos[linha][0]
        print("Valor_id da avaliacao é: ", valor_id)
        cursor.execute("SELECT * FROM avaliacao_csp WHERE id=" + str(valor_id))
        avaliacao = cursor.fetchall()
        # avaliacao é a própria linha da avaliação selecionada
        print("avaliacao é:", avaliacao)
        # cursor3.execute(
        #     "SELECT q1,q2,q3,q4,q5,q6,q7,q8,q9,q10,q11,q12,q13,q14,q15,q16,q17,q18,q19,q20,q21,q23,q24 FROM avaliacao_csp WHERE id=" + str(valor_id))
        # lista_lida = cursor3.fetchall()
        str_id = avaliacao[0][0]
        id = str(str_id)
        avaliador = avaliacao[0][1]
        provedor = avaliacao[0][2]
        mes = avaliacao[0][3]
        ano = avaliacao[0][4]
        atividade = avaliacao[0][5]
        incidentes = avaliacao[0][6]
        GVij = avaliacao[0][7]
        TPij = avaliacao[0][8]
        SIij = avaliacao[0][9]
        IGVj = avaliacao[0][10]
        ITPj = avaliacao[0][11]
        ISIj = avaliacao[0][12]
        q1 = avaliacao[0][13]
        q2 = avaliacao[0][14]
        q3 = avaliacao[0][15]
        q4 = avaliacao[0][16]
        q5 = avaliacao[0][17]
        q6 = avaliacao[0][18]
        q7 = avaliacao[0][19]
        q8 = avaliacao[0][20]
        q9 = avaliacao[0][21]
        q10 = avaliacao[0][22]
        q11 = avaliacao[0][23]
        q12 = avaliacao[0][24]
        q13 = avaliacao[0][25]
        q14 = avaliacao[0][26]
        q15 = avaliacao[0][27]
        q16 = avaliacao[0][28]
        q17 = avaliacao[0][29]
        q18 = avaliacao[0][30]
        q19 = avaliacao[0][31]
        q20 = avaliacao[0][32]
        q21 = avaliacao[0][33]
        q22 = avaliacao[0][34]
        q23 = avaliacao[0][35]
        q24 = avaliacao[0][36]
        lista_avaliacao_avaliador.label.setText(avaliador)
        lista_avaliacao_avaliador.label_2.setText(id)
        if atividade == 1:
            lista_avaliacao_avaliador.label_4.setText("Yes")
            print("Está ativo")
        else:
            lista_avaliacao_avaliador.label_4.setText("No")

        if incidentes == 1:
            lista_avaliacao_avaliador.radioButton121.setChecked(True)
            print("Houve incidentes!!!")

        else:
            lista_avaliacao_avaliador.radioButton122.setChecked(True)
            print("Não houve incidentes")

        # lista_avaliacao_avaliador.comboBox_2.addItem(provedor)

        ##POPULAR COMBOBOXES GERAIS PARA QUE POSSAM SER INSERIDAS NOVAS AVALIAÇÕES A PARTIR DA EDITADA)##
        lista_avaliacao_avaliador.comboBox_2.clear()

        Comando_SQL2 = "select provedor from provedores where atividade=1"
        cursor2 = banco.cursor()
        cursor2.execute(Comando_SQL2)
        dados_lidos2 = cursor2.fetchall()
        for s in range(len(dados_lidos2,)):

            print(dados_lidos2[s])

            # StatusAPIUX.comboBox_2.addItem(str(dados_lidos2[s][0]))
            # StatusAPIUX_avaliador.comboBox_2.addItem(str(dados_lidos2[s][0]))
            lista_avaliacao_avaliador.comboBox_2.addItem(
                str(dados_lidos2[s][0]))
        # cursor.execute(
        #     "select * from provedores where provedor=('%s')" % provedor)
        # provedor_lido = cursor.fetchall()
        # provedorid = provedor_lido[0]
        # print("Id do provedor:", provedorid)
        # lista_avaliacao_avaliador.comboBox_2.setCurrentIndex(provedor)

        lista_avaliacao_avaliador.comboBox_2.setCurrentText(provedor)
        lista_avaliacao_avaliador.comboBox_3.setCurrentText(str(mes))
        lista_avaliacao_avaliador.comboBox_4.setCurrentText(str(ano))
        # lista_avaliacao_avaliador.comboBox_3.setCurrentData(mes)
        # lista_avaliacao_avaliador.comboBox_4.setCurrentData(ano)

        banco.commit()
        # cursor.close()
        ##POPULAR COMBOBOXES GERAIS PARA QUE POSSAM SER INSERIDAS NOVAS AVALIAÇÕES A PARTIR DA EDITADA)##

        # q1 = lista_lida[0]
        # q2 = lista_lida[1]
        print(id)
        print(avaliador)
        print(provedor)
        print(mes)
        print(ano)
        print(q1)
        # qum = str(formulario_avaliacao.buttonGroup.checkedId())
        # if qum == "-2":
        #     qum = 4
        #     print(qum)

        # elif qum == "-3":
        #     qum = 3
        #     print(qum)
        # incidentes = str(lista_avaliacao_avaliador.buttonGroup_25.checkedId())

        ###################QUESTÃO 1###############################
        if q1 == (4):
            lista_avaliacao_avaliador.radioButton1.setChecked(True)
            print(q1)
            q1 = 4

        elif q1 == (3):
            lista_avaliacao_avaliador.radioButton2.setChecked(True)
            print(q1)
            q1 = 3
        elif q1 == (2):
            lista_avaliacao_avaliador.radioButton3.setChecked(True)
            print(q1)
            q1 = 2
        elif q1 == (1):
            lista_avaliacao_avaliador.radioButton4.setChecked(True)
            print(q1)
            q1 = 1
        elif q1 == (0):
            lista_avaliacao_avaliador.radioButton5.setChecked(True)
            print(q1)
            q1 = 0
###################QUESTÃO 2###############################
        if q2 == (4):
            lista_avaliacao_avaliador.radioButton6.setChecked(True)
            print(q2)
            q2 = 4
        elif q2 == (3):
            lista_avaliacao_avaliador.radioButton7.setChecked(True)
            print(q2)
            q2 = 3
        elif q2 == (2):
            lista_avaliacao_avaliador.radioButton8.setChecked(True)
            print(q2)
            q2 = 2
        elif q2 == (1):
            lista_avaliacao_avaliador.radioButton9.setChecked(True)
            print(q2)
            q2 = 1
        elif q2 == (0):
            lista_avaliacao_avaliador.radioButton10.setChecked(True)
            print(q2)
            q1 = 0
    ###################QUESTÃO 3###############################
        if q3 == (4):
            lista_avaliacao_avaliador.radioButton11.setChecked(True)
            print(q3)
            q3 = 4
        elif q3 == (3):
            lista_avaliacao_avaliador.radioButton12.setChecked(True)
            print(q3)
            q3 = 3
        elif q3 == (2):
            lista_avaliacao_avaliador.radioButton13.setChecked(True)
            print(q3)
            q3 = 2

        elif q3 == (1):
            lista_avaliacao_avaliador.radioButton14.setChecked(True)
            print(q3)
            q3 = 1

        elif q3 == (0):
            lista_avaliacao_avaliador.radioButton15.setChecked(True)
            print(q3)
            q3 = 0
    ###################QUESTÃO 4###############################
        if q4 == (4):
            lista_avaliacao_avaliador.radioButton16.setChecked(True)
            print(q4)
            q4 = 4
        elif q4 == (3):
            lista_avaliacao_avaliador.radioButton17.setChecked(True)
            print(q4)
            q4 = 3
        elif q4 == (2):
            lista_avaliacao_avaliador.radioButton18.setChecked(True)
            print(q4)
            q4 = 2

        elif q4 == (1):
            lista_avaliacao_avaliador.radioButton19.setChecked(True)
            print(q4)
            q4 = 1

        elif q4 == (0):
            lista_avaliacao_avaliador.radioButton20.setChecked(True)
            print(q4)
            q4 = 0

    ###################QUESTÃO 5###############################
        if q5 == (4):
            lista_avaliacao_avaliador.radioButton21.setChecked(True)
            print(q5)
            q5 = 4
        elif q5 == (3):
            lista_avaliacao_avaliador.radioButton22.setChecked(True)
            print(q5)
            q5 = 3
        elif q5 == (2):
            lista_avaliacao_avaliador.radioButton23.setChecked(True)
            print(q5)
            q5 = 2
        elif q5 == (1):
            lista_avaliacao_avaliador.radioButton24.setChecked(True)
            print(q5)
            q5 = 1

        elif q5 == (0):
            lista_avaliacao_avaliador.radioButton25.setChecked(True)
            print(q5)
            q5 = 0
    ###################QUESTÃO 6###############################
        if q6 == (4):
            lista_avaliacao_avaliador.radioButton26.setChecked(True)
            print(q6)
            q6 = 4

        elif q6 == (3):
            lista_avaliacao_avaliador.radioButton27.setChecked(True)
            print(q6)
            q6 = 3
        elif q6 == (2):
            lista_avaliacao_avaliador.radioButton28.setChecked(True)
            print(q6)
            q6 = 2

        elif q6 == (1):
            lista_avaliacao_avaliador.radioButton29.setChecked(True)
            print(q6)
            q6 = 1
        elif q6 == (0):
            lista_avaliacao_avaliador.radioButton30.setChecked(True)
            print(q6)
            q6 = 0
    ###################QUESTÃO 7###############################
        if q7 == (4):
            lista_avaliacao_avaliador.radioButton31.setChecked(True)
            print(q7)
            q7 = 4
        elif q7 == (3):
            lista_avaliacao_avaliador.radioButton32.setChecked(True)
            print(q7)
            q7 = 3
        elif q7 == (2):
            lista_avaliacao_avaliador.radioButton33.setChecked(True)
            print(q7)
            q7 = 2
        elif q7 == (1):
            lista_avaliacao_avaliador.radioButton34.setChecked(True)
            print(q7)
            q7 = 1
        elif q7 == (0):
            lista_avaliacao_avaliador.radioButton35.setChecked(True)
            print(q7)
            q7 = 0

    ###################QUESTÃO 8###############################
        if q8 == (4):
            lista_avaliacao_avaliador.radioButton36.setChecked(True)
            print(q8)
            q8 = 4

        elif q8 == (3):
            lista_avaliacao_avaliador.radioButton37.setChecked(True)
            print(q8)
            q8 = 3
        elif q8 == (2):
            lista_avaliacao_avaliador.radioButton38.setChecked(True)
            print(q8)
            q8 = 2
        elif q8 == (1):
            lista_avaliacao_avaliador.radioButton39.setChecked(True)
            print(q8)
            q8 = 1
        elif q8 == (0):
            lista_avaliacao_avaliador.radioButton40.setChecked(True)
            print(q8)
            q8 = 0
    ###################QUESTÃO 9###############################
        if q9 == (4):
            lista_avaliacao_avaliador.radioButton41.setChecked(True)
            print(q9)
            q9 = 4
        elif q9 == (3):
            lista_avaliacao_avaliador.radioButton42.setChecked(True)
            print(q9)
            q9 = 3
        elif q9 == (2):
            lista_avaliacao_avaliador.radioButton43.setChecked(True)
            print(q9)
            q9 = 2
        elif q9 == (1):
            lista_avaliacao_avaliador.radioButton44.setChecked(True)
            print(q9)
            q9 = 1
        elif q9 == (0):
            lista_avaliacao_avaliador.radioButton45.setChecked(True)
            print(q9)
            q9 = 0

    ###################QUESTÃO 10###############################
        if q10 == (4):
            lista_avaliacao_avaliador.radioButton46.setChecked(True)
            print(q10)
            q10 = 4
        elif q10 == (3):
            lista_avaliacao_avaliador.radioButton47.setChecked(True)
            print(q10)
            q10 = 3
        elif q10 == (2):
            lista_avaliacao_avaliador.radioButton48.setChecked(True)
            print(q10)
            q10 = 2
        elif q10 == (1):
            lista_avaliacao_avaliador.radioButton49.setChecked(True)
            print(q10)
            q10 = 1
        elif q10 == (0):
            lista_avaliacao_avaliador.radioButton50.setChecked(True)
            print(q10)
            q10 = 0
    ###################QUESTÃO 11###############################
        if q11 == (4):
            lista_avaliacao_avaliador.radioButton51.setChecked(True)
            print(q11)
            q11 = 4
        elif q11 == (3):
            lista_avaliacao_avaliador.radioButton52.setChecked(True)
            print(q11)
            q11 = 3
        elif q11 == (2):
            lista_avaliacao_avaliador.radioButton53.setChecked(True)
            print(q11)
            q11 = 2
        elif q11 == (1):
            lista_avaliacao_avaliador.radioButton54.setChecked(True)
            print(q11)
            q11 = 1
        elif q11 == (0):
            lista_avaliacao_avaliador.radioButton55.setChecked(True)
            print(q11)
            q11 = 0
    ###################QUESTÃO 12###############################
        if q12 == (4):
            lista_avaliacao_avaliador.radioButton56.setChecked(True)
            print(q12)
            q12 = 4
        elif q12 == (3):
            lista_avaliacao_avaliador.radioButton57.setChecked(True)
            print(q12)
            q12 = 3
        elif q12 == (2):
            lista_avaliacao_avaliador.radioButton58.setChecked(True)
            print(q12)
            q12 = 2
        elif q12 == (1):
            lista_avaliacao_avaliador.radioButton59.setChecked(True)
            print(q12)
            q12 = 1
        elif q12 == (0):
            lista_avaliacao_avaliador.radioButton60.setChecked(True)
            print(q12)
            q12 = 0
    ###################QUESTÃO 13###############################
        if q13 == (4):
            lista_avaliacao_avaliador.radioButton61.setChecked(True)
            print(q13)
            q13 = 4
        elif q13 == (3):
            lista_avaliacao_avaliador.radioButton62.setChecked(True)
            print(q13)
            q13 = 3
        elif q13 == (2):
            lista_avaliacao_avaliador.radioButton63.setChecked(True)
            print(q13)
            q13 = 2
        elif q13 == (1):
            lista_avaliacao_avaliador.radioButton64.setChecked(True)
            print(q13)
            q13 = 1
        elif q13 == (0):
            lista_avaliacao_avaliador.radioButton65.setChecked(True)
            print(q13)
            q13 = 0

    ###################QUESTÃO 14###############################
        if q14 == (4):
            lista_avaliacao_avaliador.radioButton66.setChecked(True)
            print(q14)
            q14 = 4
        elif q14 == (3):
            lista_avaliacao_avaliador.radioButton67.setChecked(True)
            print(q14)
            q14 = 3
        elif q14 == (2):
            lista_avaliacao_avaliador.radioButton68.setChecked(True)
            print(q14)
            q14 = 2
        elif q14 == (1):
            lista_avaliacao_avaliador.radioButton69.setChecked(True)
            print(q14)
            q14 = 1
        elif q14 == (0):
            lista_avaliacao_avaliador.radioButton70.setChecked(True)
            print(q14)
            q14 = 0

    ###################QUESTÃO 15###############################
        if q15 == (4):
            lista_avaliacao_avaliador.radioButton71.setChecked(True)
            print(q15)
            q15 = 4
        elif q15 == (3):
            lista_avaliacao_avaliador.radioButton72.setChecked(True)
            print(q15)
            q15 = 3
        elif q15 == (2):
            lista_avaliacao_avaliador.radioButton73.setChecked(True)
            print(q15)
            q15 = 2
        elif q15 == (1):
            lista_avaliacao_avaliador.radioButton74.setChecked(True)
            print(q15)
            q15 = 1
        elif q15 == (0):
            lista_avaliacao_avaliador.radioButton75.setChecked(True)
            print(q15)
            q15 = 0

    ###################QUESTÃO 16###############################
        if q16 == (4):
            lista_avaliacao_avaliador.radioButton76.setChecked(True)
            print(q16)
            q16 = 4
        elif q16 == (3):
            lista_avaliacao_avaliador.radioButton77.setChecked(True)
            print(q16)
            q16 = 3
        elif q16 == (2):
            lista_avaliacao_avaliador.radioButton78.setChecked(True)
            print(q16)
            q16 = 2
        elif q16 == (1):
            lista_avaliacao_avaliador.radioButton79.setChecked(True)
            print(q16)
            q16 = 1
        elif q16 == (0):
            lista_avaliacao_avaliador.radioButton80.setChecked(True)
            print(q16)
            q16 = 0

    ###################QUESTÃO 17###############################
        if q17 == (4):
            lista_avaliacao_avaliador.radioButton81.setChecked(True)
            print(q17)
            q17 = 4
        elif q17 == (3):
            lista_avaliacao_avaliador.radioButton82.setChecked(True)
            print(q17)
            q17 = 3
        elif q17 == (2):
            lista_avaliacao_avaliador.radioButton83.setChecked(True)
            print(q17)
            q17 = 2
        elif q17 == (1):
            lista_avaliacao_avaliador.radioButton84.setChecked(True)
            print(q17)
            q17 = 1
        elif q17 == (0):
            lista_avaliacao_avaliador.radioButton85.setChecked(True)
            print(q17)
            q17 = 0

    # ###################QUESTÃO q18###############################
        if q18 == (4):
            lista_avaliacao_avaliador.radioButton86.setChecked(True)
            print(q18)
            q18 = 4
        elif q18 == (3):
            lista_avaliacao_avaliador.radioButton87.setChecked(True)
            print(q18)
            q18 = 3
        elif q18 == (2):
            lista_avaliacao_avaliador.radioButton88.setChecked(True)
            print(q18)
            q18 = 2
        elif q18 == (1):
            lista_avaliacao_avaliador.radioButton89.setChecked(True)
            print(q18)
            q18 = 1
        elif q18 == (0):
            lista_avaliacao_avaliador.radioButton90.setChecked(True)
            print(q18)
            q18 = 0

    ###################QUESTÃO 19###############################
        if q19 == (4):
            lista_avaliacao_avaliador.radioButton91.setChecked(True)
            print(q19)
            q19 = 4
        elif q19 == (3):
            lista_avaliacao_avaliador.radioButton92.setChecked(True)
            print(q19)
            q19 = 3
        elif q19 == (2):
            lista_avaliacao_avaliador.radioButton93.setChecked(True)
            print(q19)
            q19 = 2
        elif q19 == (1):
            lista_avaliacao_avaliador.radioButton94.setChecked(True)
            print(q19)
            q19 = 1
        elif q19 == (0):
            lista_avaliacao_avaliador.radioButton95.setChecked(True)
            print(q19)
            q19 = 0

    ###################QUESTÃO q20###############################
        if q20 == (4):
            lista_avaliacao_avaliador.radioButton96.setChecked(True)
            print(q20)
            q20 = 4
        elif q20 == (3):
            lista_avaliacao_avaliador.radioButton97.setChecked(True)
            print(q20)
            q20 = 3
        elif q20 == (2):
            lista_avaliacao_avaliador.radioButton98.setChecked(True)
            print(q20)
            q20 = 2
        elif q20 == (1):
            lista_avaliacao_avaliador.radioButton99.setChecked(True)
            print(q20)
            q20 = 1
        elif q20 == (0):
            lista_avaliacao_avaliador.radioButton100.setChecked(True)
            print(q20)
            q20 = 0

    ###################QUESTÃO q21###############################
        if q21 == (4):
            lista_avaliacao_avaliador.radioButton101.setChecked(True)
            print(q21)
            q21 = 4
        elif q21 == (3):
            lista_avaliacao_avaliador.radioButton102.setChecked(True)
            print(q21)
            q21 = 3
        elif q21 == (2):
            lista_avaliacao_avaliador.radioButton103.setChecked(True)
            print(q21)
            q21 = 2
        elif q21 == (1):
            lista_avaliacao_avaliador.radioButton104.setChecked(True)
            print(q21)
            q21 = 1
        elif q21 == (0):
            lista_avaliacao_avaliador.radioButton105.setChecked(True)
            print(q21)
            q21 = 0

    ###################QUESTÃO q22###############################
        if q22 == (4):
            lista_avaliacao_avaliador.radioButton106.setChecked(True)
            print(q22)
            q22 = 4
        elif q22 == (3):
            lista_avaliacao_avaliador.radioButton107.setChecked(True)
            print(q22)
            q22 = 3
        elif q22 == (2):
            lista_avaliacao_avaliador.radioButton108.setChecked(True)
            print(q22)
            q22 = 2
        elif q22 == (1):
            lista_avaliacao_avaliador.radioButton109.setChecked(True)
            print(q22)
            q22 = 1
        elif q22 == (0):
            lista_avaliacao_avaliador.radioButton110.setChecked(True)
            print(q22)
            q22 = 0

    ###################QUESTÃO q23###############################
        if q23 == (4):
            lista_avaliacao_avaliador.radioButton111.setChecked(True)
            print(q23)
            q23 = 4
        elif q23 == (3):
            lista_avaliacao_avaliador.radioButton112.setChecked(True)
            print(q23)
            q23 = 3
        elif q23 == (2):
            lista_avaliacao_avaliador.radioButton113.setChecked(True)
            print(q23)
            q23 = 2
        elif q23 == (1):
            lista_avaliacao_avaliador.radioButton114.setChecked(True)
            print(q23)
            q23 = 1
        elif q23 == (0):
            lista_avaliacao_avaliador.radioButton115.setChecked(True)
            print(q23)
            q23 = 0

    ###################QUESTÃO q24###############################
        if q24 == (4):
            lista_avaliacao_avaliador.radioButton116.setChecked(True)
            print(q24)
            q24 = 4
        elif q24 == (3):
            lista_avaliacao_avaliador.radioButton117.setChecked(True)
            print(q24)
            q24 = 3
        elif q24 == (2):
            lista_avaliacao_avaliador.radioButton118.setChecked(True)
            print(q24)
            q24 = 2
        elif q24 == (1):
            lista_avaliacao_avaliador.radioButton119.setChecked(True)
            print(q24)
            q24 = 1
        elif q24 == (0):
            lista_avaliacao_avaliador.radioButton120.setChecked(True)
            print(q24)
            q24 = 0
###fim do preenchimento das informações no formulário###
        lista_avaliacao_avaliador.show()
        numero_id = valor_id
        # lista_avaliacao.label_3.setText(str(valor_id)) #valor_id era pra inserir avaliação sendo gestor
    #####LISTA AVALIACAO DO AVALIADOR, SUBSTITUIDO PELO FORMULARIO RECUPERÁVEL#####
    #     lista_avaliacao_avaliador.tableWidget.setRowCount(len(avaliacao))
    #     lista_avaliacao_avaliador.tableWidget.setColumnCount(29)

    #     for i in range(0, len(avaliacao)):
    #         for j in range(0, 29):
    #             lista_avaliacao_avaliador.tableWidget.setItem(
    #                 i, j, QtWidgets.QTableWidgetItem(str(avaliacao[i][j])))
    #     print(avaliacao[0])
    #     print(avaliacao[0][4])
    except IndexError:
        gotdata = 'null'
        QMessageBox.about(lista_avaliacao, "Vazio", "Lista vazia")
        # LISTA AVALIACAO DO AVALIADOR, SUBSTITUIDO PELO FORMULARIO RECUPERÁVEL#####y
  #######da nova_avaliacao######


def detalhes_avaliador_nova_avaliacao():  # nova avaliacao do formulario preenchido atraves de BD####
    q1 = str(lista_avaliacao_avaliador.buttonGroup.checkedId())
    if q1 == "-2":
        q1 = 4
        print("Q1:", q1)

    elif q1 == "-3":
        q1 = 3
        print("Q1:", q1)

    elif q1 == "-4":
        q1 = 2
        print("Q1:", q1)
    elif q1 == "-5":
        q1 = 1
        print("Q1:", q1)
    elif q1 == "-6":
        q1 = 0
        print("Q1:", q1)
    # QRadioButton:checked{ background-color: red; } QRadioButton:unchecked{ background-color: black; }
        # QMessageBox.about(formulario_avaliacao, "ALERTA","Valor 0 inserido na Questão 1, corrigir ou continuar")
    q2 = str(lista_avaliacao_avaliador.buttonGroup_2.checkedId())
    if q2 == "-2":
        q2 = 4
        print("Q2:", q2)
    elif q2 == "-3":
        q2 = 3
        print("Q2:", q2)
    elif q2 == "-4":
        q2 = 2
        print("Q2:", q2)
    elif q2 == "-5":
        q2 = 1
        print("Q2:", q2)
    elif q2 == "-6":
        q2 = 0
        print("Q2:", q2)
        # QMessageBox.about(formulario_avaliacao, "ALERTA","Valor 0 inserido na Questão 2, corrigir ou continuar")

    q3 = str(lista_avaliacao_avaliador.buttonGroup_3.checkedId())
    if q3 == "-2":
        q3 = 4
        print("Q3:", q3)
    elif q3 == "-3":
        q3 = 3
        print("Q3:", q3)
    elif q3 == "-4":
        q3 = 2
        print(q3)
    elif q3 == "-5":
        q3 = 1
        print("Q3:", q3)
    elif q3 == "-6":
        q3 = 0
        print("Q3:", q3)
        # QMessageBox.about(formulario_avaliacao, "ALERTA","Valor 0 inserido na Questão 3, corrigir ou continuar")
    q4 = str(lista_avaliacao_avaliador.buttonGroup_4.checkedId())
    if q4 == "-2":
        q4 = 4
        print("Q4:", q4)
    elif q4 == "-3":
        q4 = 3
        print("Q4:", q4)
    elif q4 == "-4":
        q4 = 2
        print("Q4:", q4)
    elif q4 == "-5":
        q4 = 1
        print("Q4:", q4)
    elif q4 == "-6":
        q4 = 0
        print("Q4:", q4)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 4, corrigir ou continuar")
    q5 = str(lista_avaliacao_avaliador.buttonGroup_5.checkedId())
    if q5 == "-2":
        q5 = 4
        print("Q5:", q5)
    elif q5 == "-3":
        q5 = 3
        print("Q5:", q5)
    elif q5 == "-4":
        q5 = 2
        print("Q5:", q5)
    elif q5 == "-5":
        q5 = 1
        print("Q5:", q5)
    elif q5 == "-6":
        q5 = 0
        print("Q5:", q5)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 5, corrigir ou continuar")
    q6 = str(lista_avaliacao_avaliador.buttonGroup_6.checkedId())
    if q6 == "-2":
        q6 = 4
        print("Q6:", q6)
    elif q6 == "-3":
        q6 = 3
        print("Q6:", q6)
    elif q6 == "-4":
        q6 = 2
        print("Q6:", q6)
    elif q6 == "-5":
        q6 = 1
        print("Q6:", q6)
    elif q6 == "-6":
        q6 = 0
        print("Q6:", q6)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 6, corrigir ou continuar")
    q7 = str(lista_avaliacao_avaliador.buttonGroup_7.checkedId())
    if q7 == "-2":
        q7 = 4
        print("Q7:", q7)
    elif q7 == "-3":
        q7 = 3
        print("Q7:", q7)
    elif q7 == "-4":
        q7 = 2
        print("Q7:", q7)
    elif q7 == "-5":
        q7 = 1
        print("Q7:", q7)
    elif q7 == "-6":
        q7 = 0
        print("Q7:", q7)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 7, corrigir ou continuar")
    q8 = str(lista_avaliacao_avaliador.buttonGroup_8.checkedId())
    if q8 == "-2":
        q8 = 4
        print("Q8:", q8)
    elif q8 == "-3":
        q8 = 3
        print("Q8:", q8)
    elif q8 == "-4":
        q8 = 2
        print("Q8:", q8)
    elif q8 == "-5":
        q8 = 1
        print("Q8:", q8)
    elif q8 == "-6":
        q8 = 0
        print("Q8:", q8)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 8, corrigir ou continuar")
    q9 = str(lista_avaliacao_avaliador.buttonGroup_9.checkedId())
    if q9 == "-2":
        q9 = 4
        print("Q9:", q9)
    elif q9 == "-3":
        q9 = 3
        print("Q9:", q9)
    elif q9 == "-4":
        q9 = 2
        print("Q9:", q9)
    elif q9 == "-5":
        q9 = 1
        print("Q9:", q9)
    elif q9 == "-6":
        q9 = 0
        print("Q9:", q9)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 9, corrigir ou continuar")
    q10 = str(lista_avaliacao_avaliador.buttonGroup_10.checkedId())
    if q10 == "-2":
        q10 = 4
        print("Q10:", q10)
    elif q10 == "-3":
        q10 = 3
        print("Q10:", q10)
    elif q10 == "-4":
        q10 = 2
        print("Q10:", q10)
    elif q10 == "-5":
        q10 = 1
        print("Q10:", q10)
    elif q10 == "-6":
        q10 = 0
        print("Q10:", q10)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 10, corrigir ou continuar")
    q11 = str(lista_avaliacao_avaliador.buttonGroup_11.checkedId())
    if q11 == "-2":
        q11 = 4
        print("Q11:", q11)
    elif q11 == "-3":
        q11 = 3
        print("Q11:", q11)
    elif q11 == "-4":
        q11 = 2
        print("Q11:", q11)
    elif q11 == "-5":
        q11 = 1
        print("Q11:", q11)
    elif q11 == "-6":
        q11 = 0
        print("Q11:", q11)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 11, corrigir ou continuar")
    q12 = str(lista_avaliacao_avaliador.buttonGroup_12.checkedId())
    if q12 == "-2":
        q12 = 4
        print("Q12:", q12)
    elif q12 == "-3":
        q12 = 3
        print("Q12:", q12)
    elif q12 == "-4":
        q12 = 2
        print("Q12:", q12)
    elif q12 == "-5":
        q12 = 1
        print("Q12:", q12)
    elif q12 == "-6":
        q12 = 0
        print("Q12:", q12)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 12, corrigir ou continuar")
    q13 = str(lista_avaliacao_avaliador.buttonGroup_13.checkedId())
    if q13 == "-2":
        q13 = 4
        print("Q13:", q13)
    elif q13 == "-3":
        q13 = 3
        print("Q13:", q13)
    elif q13 == "-4":
        q13 = 2
        print("Q13:", q13)
    elif q13 == "-5":
        q13 = 1
        print("Q13:", q13)
    elif q13 == "-6":
        q13 = 0
        print("Q13:", q13)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 13, corrigir ou continuar")
    q14 = str(lista_avaliacao_avaliador.buttonGroup_14.checkedId())
    if q14 == "-2":
        q14 = 4
        print("Q14:", q14)
    elif q14 == "-3":
        q14 = 3
        print("Q14:", q14)
    elif q14 == "-4":
        q14 = 2
        print("Q14:", q14)
    elif q14 == "-5":
        q14 = 1
        print("Q14:", q14)
    elif q14 == "-6":
        q14 = 0
        print("Q14:", q14)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 14, corrigir ou continuar")
    q15 = str(lista_avaliacao_avaliador.buttonGroup_15.checkedId())
    if q15 == "-2":
        q15 = 4
        print("Q15:", q15)
    elif q15 == "-3":
        q15 = 3
        print("Q15:", q15)
    elif q15 == "-4":
        q15 = 2
        print("Q15:", q15)
    elif q15 == "-5":
        q15 = 1
        print("Q15:", q15)
    elif q15 == "-6":
        q15 = 0
        print("Q15:", q15)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 15, corrigir ou continuar")
    q16 = str(lista_avaliacao_avaliador.buttonGroup_16.checkedId())
    if q16 == "-2":
        q16 = 4
        print("Q16:", q16)
    elif q16 == "-3":
        q16 = 3
        print("Q16:", q16)
    elif q16 == "-4":
        q16 = 2
        print("Q16:", q16)
    elif q16 == "-5":
        q16 = 1
        print("Q16:", q16)
    elif q16 == "-6":
        q16 = 0
        print("Q16:", q16)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 16, corrigir ou continuar")
    q17 = str(lista_avaliacao_avaliador.buttonGroup_17.checkedId())
    if q17 == "-2":
        q17 = 4
        print("Q17:", q17)
    elif q17 == "-3":
        q17 = 3
        print("Q17:", q17)
    elif q17 == "-4":
        q17 = 2
        print("Q17:", q17)
    elif q17 == "-5":
        q17 = 1
        print("Q17:", q17)
    elif q17 == "-6":
        q17 = 0
        print("Q17:", q17)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 17, corrigir ou continuar")
    q18 = str(lista_avaliacao_avaliador.buttonGroup_18.checkedId())
    if q18 == "-2":
        q18 = 4
        print("Q18:", q18)
    elif q18 == "-3":
        q18 = 3
        print("Q18:", q18)
    elif q18 == "-4":
        q18 = 2
        print("Q18:", q18)
    elif q18 == "-5":
        q18 = 1
        print("Q18:", q18)
    elif q18 == "-6":
        q18 = 0
        print("Q18:", q18)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 18, corrigir ou continuar")
    q19 = str(lista_avaliacao_avaliador.buttonGroup_19.checkedId())
    if q19 == "-2":
        q19 = 4
        print("Q19:", q19)
    elif q19 == "-3":
        q19 = 3
        print("Q19:", q19)
    elif q19 == "-4":
        q19 = 2
        print("Q19:", q19)
    elif q19 == "-5":
        q19 = 1
        print("Q19:", q19)
    elif q19 == "-6":
        q19 = 0
        print("Q19:", q19)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 19, corrigir ou continuar")
    q20 = str(lista_avaliacao_avaliador.buttonGroup_20.checkedId())
    if q20 == "-2":
        q20 = 4
        print("Q20:", q20)
    elif q20 == "-3":
        q20 = 3
        print("Q20:", q20)
    elif q20 == "-4":
        q20 = 2
        print("Q20:", q20)
    elif q20 == "-5":
        q20 = 1
        print("Q20:", q20)
    elif q20 == "-6":
        q20 = 0
        print("Q20:", q20)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 20, corrigir ou continuar")
    q21 = str(lista_avaliacao_avaliador.buttonGroup_21.checkedId())
    if q21 == "-2":
        q21 = 4
        print("Q21:", q21)
    elif q21 == "-3":
        q21 = 3
        print("Q21:", q21)
    elif q21 == "-4":
        q21 = 2
        print("Q21:", q21)
    elif q21 == "-5":
        q21 = 1
        print("Q21:", q21)
    elif q21 == "-6":
        q21 = 0
        print("Q21:", q21)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 21, corrigir ou continuar")
    q22 = str(lista_avaliacao_avaliador.buttonGroup_22.checkedId())
    if q22 == "-2":
        q22 = 4
        print("Q22:", q22)
    elif q22 == "-3":
        q22 = 3
        print("Q22:", q22)
    elif q22 == "-4":
        q22 = 2
        print("Q22:", q22)
    elif q22 == "-5":
        q22 = 1
        print("Q22:", q22)
    elif q22 == "-6":
        q22 = 0
        print("Q22:", q22)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 22, corrigir ou continuar")
    q23 = str(lista_avaliacao_avaliador.buttonGroup_23.checkedId())
    if q23 == "-2":
        q23 = 4
        print("Q23:", q23)
    elif q23 == "-3":
        q23 = 3
        print("Q23:", q23)
    elif q23 == "-4":
        q23 = 2
        print("Q23:", q23)
    elif q23 == "-5":
        q23 = 1
        print("Q23:", q23)
    elif q23 == "-6":
        q23 = 0
        print("Q23:", q23)
        # QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
        # "Valor 0 inserido na Questão 23, corrigir ou continuar")

    q24 = str(lista_avaliacao_avaliador.buttonGroup_24.checkedId())
    if q24 == "-2":
        q24 = 4
        print("Q24:", q24)
    elif q24 == "-3":
        q24 = 3
        print("Q24:", q24)
    elif q24 == "-4":
        q24 = 2
        print("Q24:", q24)
    elif q24 == "-5":
        q24 = 1
        print("Q24:", q24)
    elif q24 == "-6":
        q24 = 0
        print("Q24:", q24)

    if lista_avaliacao_avaliador.radioButton121.isChecked():
        print("Teve incidente neste mês")
        incidentes = 1
        RB = 1
    elif lista_avaliacao_avaliador.radioButton122.isChecked():
        print("Não teve incidentes neste mês")
        incidentes = 0
        RB = 1.1

    cursor2 = banco.cursor(buffered=True)
    avaliador = lista_avaliacao_avaliador.label.text()
    provedor = lista_avaliacao_avaliador.comboBox_2.currentText()
    mes = lista_avaliacao_avaliador.comboBox_3.currentText()
    ano = lista_avaliacao_avaliador.comboBox_4.currentText()
    mes = int(mes)
    ano = int(ano)
    Comando_SQL2 = ("select id from avaliacao_csp where avaliador=('%s') and provedor=('%s') and mes=('%s') and ano =('%s')" % (
        avaliador, provedor, mes, ano))
    cursor2.execute(Comando_SQL2)
    dados_lidos = cursor2.fetchone()
    avaliacaoid_lido = dados_lidos
    print("Id da avaliacao que sera caso necessite substituir:", avaliacaoid_lido)

    # ####VERIFICAR REPETIÇÃO DE AVALIAÇÃO########
    cursor4 = banco.cursor(buffered=True)
    cursor = banco.cursor(buffered=True)

    Comando_SQL4 = ("select mes,ano from avaliacao_csp where avaliador=('%s') and provedor=('%s') and mes=('%s') and ano =('%s')" % (
        avaliador, provedor, mes, ano))

    cursor4.execute(Comando_SQL4)

    # (03,2020) printa a data
    avaliacaotempo_lido = cursor4.fetchone()
    # verificar se já foi feita alguma avaliação
    print("Tempo da avaliacao lida:", avaliacaotempo_lido)

    # 08/07 FAZENDO A NOVA AVALIAÇÃO DA LISTA DE DETALHES, TAMBÉM CONTAR NOVOS INDICES
    # RB = 1.1
    m = incidentes

    GVij = (q1+q2+q3+q4+q5+q6+q7)/7  # índice para o mês atual
    print("Indíce de Governança do Detalhes:", GVij)

    TPij = (q8+q9+q10+q11+q12+q13+q14)/7
    print("Indíce de Transparência do Detalhes:", TPij)

    SIij = (q15+q16+q17+q18+q19+q20+q21+q22+q23+q24)/10
    print("Indíce de Segurança da Informação do Detalhes:", SIij)
    if q1 or q2 or q3 or q4 or q5 or q6 or q7 or q8 or q9 or q10 or q11 or q12 or q13 or q14 or q15 or q16 or q17 or q18 or q19 or q20 or q21 or q22 or q23 or q24 == 0:
        QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
                          "Valor 0 inserido numa ou mais respostas, corrigir ou continuar")
        resp = QMessageBox.question(
            lista_avaliacao_avaliador, 'Continuar?', 'Envie a avaliação.', QMessageBox.Yes | QMessageBox.No)
        if resp == QMessageBox.Yes:
            print("continuando do Detalhes")
            # lista_avaliacao_avaliador.close()
            # QMessageBox.about(lista_avaliacao_avaliador, "Concluído",
            #                   "Avaliação armazenada com sucesso!")
        else:
            print("aguardando enviar avaliação do Detalhes")
            return detalhes_avaliador()

    cursor4.close()
    if avaliacaotempo_lido is not None:
        avaliacaotempo_lido = avaliacaotempo_lido[0]
        if avaliacaotempo_lido >= 1:

            QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
                              "Esta avaliação já foi realizada, corrigir a data ou substituir a avaliação:")
            resp = QMessageBox.question(
                lista_avaliacao_avaliador, 'Continuar?', 'Substituir a avaliação.', QMessageBox.Yes | QMessageBox.No)
            if resp == QMessageBox.Yes:
                print("Substituindo a avaliação realizada do Detalhes.")
                avaliacaoid_lido = avaliacaoid_lido[0]
                print(
                    "Id da avaliacao que sera caso necessite substituir sem virgula do Detalhes", avaliacaoid_lido)
                # formulario_avaliacao.close()
                cursor2 = banco.cursor()

                cursor2.execute("UPDATE avaliacao_csp SET avaliador=('%s'),provedor=('%s'),mes=('%s'),ano=('%s'),incidentes=('%s'),GVij=('%s'),TPij=('%s'),SIij=('%s'),q1=('%s'), q2=('%s'), q3=('%s'), q4=('%s'), q5=('%s'), q6=('%s'), q7=('%s'), q8=('%s'), q9=('%s'), q10=('%s'), q11=('%s'), q12=('%s'), q13=('%s'), q14=('%s'), q15=('%s'), q16=('%s'), q17=('%s'), q18=('%s'), q19=('%s'), q20=('%s'), q21=('%s'), q22=('%s'), q23=('%s'), q24=('%s') WHERE id=%s" % (
                    (str(avaliador), str(provedor), int(mes), int(ano), int(incidentes), float(GVij), float(TPij), float(SIij), str(q1), str(q2), str(q3), str(q4), str(q5), str(q6), str(q7), str(q8), str(q9), str(q10), str(
                        q11), str(q12), str(q13), str(q14), str(q15), str(q16), str(q17), str(q18), str(q19), str(q20), str(q21), str(q22), str(q23), str(q24), avaliacaoid_lido)))

                banco.commit()
                lista_avaliacao_avaliador.close()
                # 08/07 \/
                limpar_avaliacao_detalhes()
                # return tela_login_dados_avaliador()
                # return

            else:
                print("Aguardando avaliação para ser substituída do Detalhes!")
                return detalhes_avaliador()

    cursor = banco.cursor(buffered=True)

    IGVj = 0  # indicadores que serão resultados das operações feitas nas parcelas
    ITPj = 0
    ISIj = 0
    # comando_SQL = "INSERT INTO avaliacao_csp (avaliador,provedor,mes,ano,atividade,incidentes,GVij, TPij, SIij,IGVj,ITPj,ISIj, q1, q2, q3, q4, q5, q6, q7, q8, q9, q10, q11, q12, q13, q14, q15, q16, q17, q18, q19, q20, q21, q22, q23, q24) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s, %s, %s,%s, %s, %s,%s, %s, %s,%s, %s, %s,%s, %s, %s,%s, %s, %s,%s, %s, %s,%s, %s)"
    # dados = (str(avaliador), str(provedor), int(mes), int(ano), int(1), int(incidentes), float(GVij), float(TPij), float(SIij), IGVj, ITPj, ISIj, str(q1), str(q2), str(q3), str(q4), str(q5), str(q6), str(q7), str(q8), str(q9), str(q10), str(
    #     q11), str(q12), str(q13), str(q14), str(q15), str(q16), str(q17), str(q18), str(q19), str(q20), str(q21), str(q22), str(q23), str(q24))
    # cursor.execute(comando_SQL, dados)

    # banco.commit()

    # banco.commit()

    # lista_avaliacao_avaliador.close()
    # # tela_login_sql()
    # limpar_avaliacao_detalhes()
    # tela_login_dados_avaliador()
    cursor2 = banco.cursor()
    mes_anterior = mes - 1
    ano2p = ano
    # indicar os valores das variáveis
    # cadastrar as variáveis no BD (provedor)

    cursor.execute(
        "select k1,k2,k3 from provedores where provedor=('%s')" % provedor)
    kn = cursor.fetchall()
    print("kn é:", kn)
    k1 = kn[0][0]
    format(k1, '.3f')
    print("k1 é:", k1)

    k2 = kn[0][1]
    format(k2, '.3f')
    print("k2 é:", k2)

    k3 = kn[0][2]
    format(k3, '.3f')
    print("k3 é:", k3)

    mes_primario = 0
    print("Mês anterior:", mes_anterior)  # GVj-1
    if mes_anterior == 0:
        mes_anterior = 12
        ano2p = ano2p-1
        print("Mês passado está no ano anterior ou é mês primário")
    else:
        "Não há valor mensal"
    try:
        Comando_SQL2 = ("select * from avaliacao_csp where avaliador=('%s') and provedor=('%s') and mes=('%s') and ano=('%s')" % (
            avaliador, provedor, mes_anterior, ano2p))
        cursor2.execute(Comando_SQL2)
        dados_lidos = cursor2.fetchall()
        avaliacao = dados_lidos
        print("A avaliação anterior com o ano passado deste avaliador com este provedor do Detalhes:", avaliacao)
        GVij2 = avaliacao[0][7]
        print("Indice de Governança com o ano passado do mês anterior do Detalhes:", GVij2)
        TPij2 = avaliacao[0][8]
        print(
            "Indice de Transparência com o ano passado do mês anterior do Detalhes:", GVij2)
        SIij2 = avaliacao[0][9]
        print("Indice de Segurança da informação com o ano passado do mês anterior do Detalhes:", GVij2)

    except IndexError:  # quando não há mês anterior
        # se não foi feito a avaliação do mês anterior? Será tratado como?# Resolver URGENTE
        avaliacao = "null"
        print("Não há avaliação feita no mês anterior do ano passado do Detalhes:", mes_anterior)
        GVij2 = 0
        TPij2 = 0
        SIij2 = 0
        # ou
        mes_primario = 1
    else:
        print("Não está no ano passado")
        try:
            Comando_SQL2 = ("select * from avaliacao_csp where avaliador=('%s') and provedor=('%s') and mes=('%s') and ano=('%s')" % (
                avaliador, provedor, mes_anterior, ano2p))
            cursor2.execute(Comando_SQL2)
            dados_lidos = cursor2.fetchall()
            avaliacao = dados_lidos
            GVij2 = avaliacao[0][7]
            print("Indice de Governança do mês anterior do Detalhes:", GVij2)
            TPij2 = avaliacao[0][8]
            print("Indice de Transparência do mês anterior do Detalhes:", GVij2)
            SIij2 = avaliacao[0][9]
            print("Indice de Segurança da informação do mês anterior do Detalhes:", GVij2)
        except IndexError:  # quando não há mês anterior
            # se não foi feito a avaliação do mês anterior? Será tratado como?# Resolver URGENTE
            avaliacao = "null"
            print("Não há avaliação feita no mês anterior do Detalhes:", mes_anterior)
            GVij2 = 0
            TPij2 = 0
            SIij2 = 0

    # floatao = 2.151212112
    # print("Floatao é:%.2f" % (floatao))
    IGVj1 = (GVij)*k1  # primeira parcela
    print("Parcela 1 da Governança do Detalhes: %.3f" % IGVj1)

    IGVj2 = (k2*(GVij-GVij2))
    print("A 2ª parcela da Governança do Detalhes é: %.3f" % IGVj2)

    ITPj1 = (TPij)*k1  # primeira parcela
    print("Parcela 1 da Transparência do Detalhes: %.3f" % ITPj1)

    ITPj2 = (k2*(TPij-TPij2))
    print("A 2ª parcela da Transparência do Detalhes é: %.3f" % ITPj2)

    ISIj1 = (SIij)*k1  # primeira parcela
    print("Parcela 1 da Segurança da Informação do Detalhes: %.3f" % ISIj1)

    ISIj2 = (k2*(SIij-SIij2))
    print("A 2ª parcela da Segurança da Informação do Detalhes é: %.3f" % ISIj2)

    #
    mes_ano = 12
    mes_atual = mes
    mes_anterior12 = mes_atual-12
    ano_atual = ano
    print("Ano atual é:", ano_atual)
    if mes_anterior12 <= 0:
        mes_anterior12 = mes_anterior12*-1  # deixar positivo
        mes_anterior12 = mes_ano-mes_anterior12
        print("12 meses atrás é do Detalhes:", mes_anterior12)
        ano_anterior = ano - 1

    comando_SQL = ("select * from avaliacao_csp where avaliador=('%s') and provedor=('%s') and mes<=('%s') and ano=('%s') UNION select * from avaliacao_csp where avaliador = ('%s') and provedor = ('%s') and mes>('%s') and ano=('%s')" %
                   (avaliador, provedor, mes_atual, ano_atual, avaliador, provedor, mes_anterior12, ano_anterior))

    cursor.execute(comando_SQL)
    dados_listados = cursor.fetchall()
    print("Abaixo avaliações feitas nos 12 meses da 3ª parcela do Detalhes:")
    print(dados_listados)
    counter = 0
    GVij12_soma = 0
    TPij12_soma = 0
    SIij12_soma = 0
    for s in range(len(dados_listados,)):

        GVij12 = dados_listados[s][7]  # vai pegando o GVij de cada avaliação
        print("Instâncias de Indices Governança do Detalhes:", GVij12)
        GVij12_soma = GVij12_soma+GVij12  # soma o GVij de cada avaliação
        print("Instâncias de Indices Governança para fazer a média do Detalhes...:", GVij12_soma)

        TPij12 = dados_listados[s][8]
        print("Instâncias de Indices Transparência do Detalhes:", TPij12)
        TPij12_soma = TPij12_soma+TPij12
        print("Instâncias de Indices Transparência para fazer a média do Detalhes...:", TPij12_soma)

        SIij12 = dados_listados[s][9]
        print("Instâncias de Indices Segurança da Informação do Detalhes:", SIij12)
        SIij12_soma = SIij12_soma+SIij12
        print("Instâncias de Indices Segurança da Informação para fazer a média do Detalhes...:", SIij12_soma)

        counter = counter+1
        print("Houve", counter, "avaliações nos últimos 12 meses")

    try:
        GVij12 = GVij12_soma/counter  # se for o primeiro mês como não teve nenhuma avaliação
    except ZeroDivisionError:
        GVij12 = 1
        print("Alocando valor para primeiro mês de Governança na 3ª parcela:", GVij12)

    print("A média das instâncias de Indices sobre a Governança nos 12 meses do Detalhes:", GVij12)

    IGVj3 = (k3*(GVij12))
    print("Parcela 3 da Governança do Detalhes:", IGVj3)

    IGVj = (((IGVj1 + IGVj2 + IGVj3) * RB)/(2**m))
    print("Indicador de confiança Governança do Detalhes:", IGVj)

    try:
        TPij12 = TPij12_soma/counter  # se for o primeiro mês como não teve nenhuma avaliação
    except ZeroDivisionError:
        TPij12 = 1
        print("Alocando valor para primeiro mês de Governança na 3ª parcela:", TPij12)

    print("A média das instâncias de Indices sobre a Transparência nos dos 12 meses:", TPij12)

    ITPj3 = (k3*(TPij12))
    print("Parcela 3 da Transparência do Detalhes:", ITPj3)

    ITPj = (((ITPj1 + ITPj2 + ITPj3) * RB)/(2**m))
    print("Indicador de confiança Transparência do Detalhes:", ITPj)

    try:
        SIij12 = SIij12_soma/counter  # se for o primeiro mês como não teve nenhuma avaliação
    except ZeroDivisionError:
        SIij12 = 1
        print("Alocando valor para primeiro mês de Governança na 3ª parcela:", SIij12)

    print("A média das instâncias de Indices sobre a Segurança da Informação nos dos 12 meses:", SIij12)

    ISIj3 = (k3*(SIij12))
    print("Parcela 3 da Segurança da Informação do Detalhes:", ISIj3)

    ISIj = (((ISIj1 + ISIj2 + ISIj3) * RB)/(2**m))
    print("Indicador de confiança Segurança da Informação do Detalhes:", ISIj)

    IGVj = format(IGVj, '.3f')
    ITPj = format(ITPj, '.3f')
    ISIj = format(ISIj, '.3f')
    if mes_primario == 1:
        # IGVj = 0
        # ITPj = 0
        # ISIj = 0
        # print("É mês primário, valores dos indicadores zerados")
        print("É mês primário")
    else:
        print("Não é mês primário")

    cursor.execute("UPDATE avaliacao_csp SET IGVj=('%s'), ITPj=('%s'),ISIj=('%s') WHERE avaliador=('%s') and provedor=('%s') and mes=('%s') and ano=('%s')" % (
        float(IGVj), float(ITPj), float(ISIj), str(avaliador), str(provedor), int(mes), int(ano)))

    banco.commit()
    lista_avaliacao_avaliador.close()
    # tela_login_sql()
    limpar_avaliacao_detalhes()
    tela_login_dados_avaliador()


def detalhes_avaliador_excluir_avaliacao():
    cursor = banco.cursor()
    avaliador = lista_avaliacao_avaliador.label.text()
    comando_SQL2 = (
        "SELECT * FROM avaliacao_csp where avaliador=('%s')" % (avaliador,))
    cursor.execute(comando_SQL2)
    dados_lidos = cursor.fetchall()
    linha2 = StatusAPIUX_avaliador.tableWidget.currentRow()
    linha = linha2
    print("Encontrando as avaliações deste avaliador:", dados_lidos)
    valor_id = dados_lidos[linha][0]
    print("Valor_id da avaliacao é: ", valor_id)
    cursor.execute("SELECT * FROM avaliacao_csp WHERE id=" + str(valor_id))
    avaliacao = cursor.fetchall()
    # avaliacao é a própria linha da avaliação selecionada
    print("avaliacao é:", avaliacao)

    cursor.execute(
        "UPDATE avaliacao_csp SET atividade = (%s) WHERE id=(%s)""" % (0, valor_id,))

    banco.commit()
    QMessageBox.about(lista_avaliacao_avaliador, "ALERT",
                      "Avaliação INATIVADA com sucesso!")

    detalhes_avaliador()


def detalhes():
    cursor = banco.cursor()
    cursor2 = banco.cursor()
    cursor3 = banco.cursor()
    limpar_avaliacao_detalhes()
    lista_avaliacao.show()

    ######DETALHES##########
    cursor = banco.cursor()
    cursor.execute("SELECT * FROM avaliacao_csp order by provedor,ano,mes")
    dados_lidos = cursor.fetchall()
    linha = StatusAPIUX.tableWidget.currentRow()
    try:

        print("Encontrando as avaliações deste avaliador:", dados_lidos)
        valor_id = dados_lidos[linha][0]
        print("Valor_id da avaliacao é: ", valor_id)
        cursor.execute("SELECT * FROM avaliacao_csp WHERE id=" + str(valor_id))
        avaliacao = cursor.fetchall()
        # avaliacao é a própria linha da avaliação selecionada
        print("avaliacao é:", avaliacao)
        # cursor3.execute(
        #     "SELECT q1,q2,q3,q4,q5,q6,q7,q8,q9,q10,q11,q12,q13,q14,q15,q16,q17,q18,q19,q20,q21,q23,q24 FROM avaliacao_csp WHERE id=" + str(valor_id))
        # lista_lida = cursor3.fetchall()
        str_id = avaliacao[0][0]
        id = str(str_id)
        avaliador = avaliacao[0][1]
        provedor = avaliacao[0][2]
        mes = avaliacao[0][3]
        ano = avaliacao[0][4]
        atividade = avaliacao[0][5]
        incidentes = avaliacao[0][6]
        GVij = avaliacao[0][7]
        TPij = avaliacao[0][8]
        SIij = avaliacao[0][9]
        IGVj = avaliacao[0][10]
        ITPj = avaliacao[0][11]
        ISIj = avaliacao[0][12]
        q1 = avaliacao[0][13]
        q2 = avaliacao[0][14]
        q3 = avaliacao[0][15]
        q4 = avaliacao[0][16]
        q5 = avaliacao[0][17]
        q6 = avaliacao[0][18]
        q7 = avaliacao[0][19]
        q8 = avaliacao[0][20]
        q9 = avaliacao[0][21]
        q10 = avaliacao[0][22]
        q11 = avaliacao[0][23]
        q12 = avaliacao[0][24]
        q13 = avaliacao[0][25]
        q14 = avaliacao[0][26]
        q15 = avaliacao[0][27]
        q16 = avaliacao[0][28]
        q17 = avaliacao[0][29]
        q18 = avaliacao[0][30]
        q19 = avaliacao[0][31]
        q20 = avaliacao[0][32]
        q21 = avaliacao[0][33]
        q22 = avaliacao[0][34]
        q23 = avaliacao[0][35]
        q24 = avaliacao[0][36]
        lista_avaliacao.label.setText(avaliador)
        lista_avaliacao.label_2.setText(id)
        if atividade == 1:
            lista_avaliacao.label_4.setText("Yes")
        else:
            lista_avaliacao.label_4.setText("No")
        if incidentes == 1:
            lista_avaliacao.radioButton121.setChecked(True)
        else:
            lista_avaliacao.radioButton122.setChecked(True)

        # lista_avaliacao_avaliador.comboBox_2.addItem(provedor)

        ##POPULAR COMBOBOXES GERAIS PARA QUE POSSAM SER INSERIDAS NOVAS AVALIAÇÕES A PARTIR DA EDITADA)##
        lista_avaliacao.comboBox_2.clear()

        Comando_SQL2 = "select provedor from provedores where atividade=1"
        cursor2 = banco.cursor()
        cursor2.execute(Comando_SQL2)
        dados_lidos2 = cursor2.fetchall()
        for s in range(len(dados_lidos2,)):

            print(dados_lidos2[s])

            # StatusAPIUX.comboBox_2.addItem(str(dados_lidos2[s][0]))
            # StatusAPIUX_avaliador.comboBox_2.addItem(str(dados_lidos2[s][0]))
            lista_avaliacao.comboBox_2.addItem(
                str(dados_lidos2[s][0]))

        lista_avaliacao.comboBox_2.setCurrentText(provedor)
        lista_avaliacao.comboBox_2.setEnabled(False)
        lista_avaliacao.comboBox_3.setCurrentText(str(mes))
        lista_avaliacao.comboBox_3.setEnabled(False)
        lista_avaliacao.comboBox_4.setCurrentText(str(ano))
        lista_avaliacao.comboBox_4.setEnabled(False)

        banco.commit()
        # cursor.close()
        ##POPULAR COMBOBOXES GERAIS PARA QUE POSSAM SER INSERIDAS NOVAS AVALIAÇÕES A PARTIR DA EDITADA)##

        # q1 = lista_lida[0]
        # q2 = lista_lida[1]
        print(id)
        print(avaliador)
        print(provedor)
        print(mes)
        print(ano)
        print(q1)

        lista_avaliacao.radioButton1.setEnabled(False)
        lista_avaliacao.radioButton2.setEnabled(False)
        lista_avaliacao.radioButton3.setEnabled(False)
        lista_avaliacao.radioButton4.setEnabled(False)
        lista_avaliacao.radioButton5.setEnabled(False)
        lista_avaliacao.radioButton6.setEnabled(False)
        lista_avaliacao.radioButton7.setEnabled(False)
        lista_avaliacao.radioButton8.setEnabled(False)
        lista_avaliacao.radioButton9.setEnabled(False)
        lista_avaliacao.radioButton10.setEnabled(False)
        lista_avaliacao.radioButton11.setEnabled(False)
        lista_avaliacao.radioButton12.setEnabled(False)
        lista_avaliacao.radioButton13.setEnabled(False)
        lista_avaliacao.radioButton14.setEnabled(False)
        lista_avaliacao.radioButton15.setEnabled(False)
        lista_avaliacao.radioButton16.setEnabled(False)
        lista_avaliacao.radioButton17.setEnabled(False)
        lista_avaliacao.radioButton18.setEnabled(False)
        lista_avaliacao.radioButton19.setEnabled(False)
        lista_avaliacao.radioButton20.setEnabled(False)
        lista_avaliacao.radioButton21.setEnabled(False)
        lista_avaliacao.radioButton22.setEnabled(False)
        lista_avaliacao.radioButton23.setEnabled(False)
        lista_avaliacao.radioButton24.setEnabled(False)
        lista_avaliacao.radioButton25.setEnabled(False)
        lista_avaliacao.radioButton26.setEnabled(False)
        lista_avaliacao.radioButton27.setEnabled(False)
        lista_avaliacao.radioButton28.setEnabled(False)
        lista_avaliacao.radioButton29.setEnabled(False)
        lista_avaliacao.radioButton30.setEnabled(False)
        lista_avaliacao.radioButton31.setEnabled(False)
        lista_avaliacao.radioButton32.setEnabled(False)
        lista_avaliacao.radioButton33.setEnabled(False)
        lista_avaliacao.radioButton34.setEnabled(False)
        lista_avaliacao.radioButton35.setEnabled(False)
        lista_avaliacao.radioButton36.setEnabled(False)
        lista_avaliacao.radioButton37.setEnabled(False)
        lista_avaliacao.radioButton38.setEnabled(False)
        lista_avaliacao.radioButton39.setEnabled(False)
        lista_avaliacao.radioButton40.setEnabled(False)
        lista_avaliacao.radioButton41.setEnabled(False)
        lista_avaliacao.radioButton42.setEnabled(False)
        lista_avaliacao.radioButton43.setEnabled(False)
        lista_avaliacao.radioButton44.setEnabled(False)
        lista_avaliacao.radioButton45.setEnabled(False)
        lista_avaliacao.radioButton46.setEnabled(False)
        lista_avaliacao.radioButton47.setEnabled(False)
        lista_avaliacao.radioButton48.setEnabled(False)
        lista_avaliacao.radioButton49.setEnabled(False)
        lista_avaliacao.radioButton50.setEnabled(False)
        lista_avaliacao.radioButton51.setEnabled(False)
        lista_avaliacao.radioButton52.setEnabled(False)
        lista_avaliacao.radioButton53.setEnabled(False)
        lista_avaliacao.radioButton54.setEnabled(False)
        lista_avaliacao.radioButton55.setEnabled(False)
        lista_avaliacao.radioButton56.setEnabled(False)
        lista_avaliacao.radioButton57.setEnabled(False)
        lista_avaliacao.radioButton58.setEnabled(False)
        lista_avaliacao.radioButton59.setEnabled(False)
        lista_avaliacao.radioButton60.setEnabled(False)
        lista_avaliacao.radioButton61.setEnabled(False)
        lista_avaliacao.radioButton62.setEnabled(False)
        lista_avaliacao.radioButton63.setEnabled(False)
        lista_avaliacao.radioButton64.setEnabled(False)
        lista_avaliacao.radioButton65.setEnabled(False)
        lista_avaliacao.radioButton66.setEnabled(False)
        lista_avaliacao.radioButton67.setEnabled(False)
        lista_avaliacao.radioButton68.setEnabled(False)
        lista_avaliacao.radioButton69.setEnabled(False)
        lista_avaliacao.radioButton70.setEnabled(False)
        lista_avaliacao.radioButton71.setEnabled(False)
        lista_avaliacao.radioButton72.setEnabled(False)
        lista_avaliacao.radioButton73.setEnabled(False)
        lista_avaliacao.radioButton74.setEnabled(False)
        lista_avaliacao.radioButton75.setEnabled(False)
        lista_avaliacao.radioButton76.setEnabled(False)
        lista_avaliacao.radioButton77.setEnabled(False)
        lista_avaliacao.radioButton78.setEnabled(False)
        lista_avaliacao.radioButton79.setEnabled(False)
        lista_avaliacao.radioButton80.setEnabled(False)
        lista_avaliacao.radioButton81.setEnabled(False)
        lista_avaliacao.radioButton82.setEnabled(False)
        lista_avaliacao.radioButton83.setEnabled(False)
        lista_avaliacao.radioButton84.setEnabled(False)
        lista_avaliacao.radioButton85.setEnabled(False)
        lista_avaliacao.radioButton86.setEnabled(False)
        lista_avaliacao.radioButton87.setEnabled(False)
        lista_avaliacao.radioButton88.setEnabled(False)
        lista_avaliacao.radioButton89.setEnabled(False)
        lista_avaliacao.radioButton90.setEnabled(False)
        lista_avaliacao.radioButton91.setEnabled(False)
        lista_avaliacao.radioButton92.setEnabled(False)
        lista_avaliacao.radioButton93.setEnabled(False)
        lista_avaliacao.radioButton94.setEnabled(False)
        lista_avaliacao.radioButton95.setEnabled(False)
        lista_avaliacao.radioButton96.setEnabled(False)
        lista_avaliacao.radioButton97.setEnabled(False)
        lista_avaliacao.radioButton98.setEnabled(False)
        lista_avaliacao.radioButton99.setEnabled(False)
        lista_avaliacao.radioButton100.setEnabled(False)
        lista_avaliacao.radioButton101.setEnabled(False)
        lista_avaliacao.radioButton102.setEnabled(False)
        lista_avaliacao.radioButton103.setEnabled(False)
        lista_avaliacao.radioButton104.setEnabled(False)
        lista_avaliacao.radioButton105.setEnabled(False)
        lista_avaliacao.radioButton106.setEnabled(False)
        lista_avaliacao.radioButton107.setEnabled(False)
        lista_avaliacao.radioButton108.setEnabled(False)
        lista_avaliacao.radioButton109.setEnabled(False)
        lista_avaliacao.radioButton110.setEnabled(False)
        lista_avaliacao.radioButton111.setEnabled(False)
        lista_avaliacao.radioButton112.setEnabled(False)
        lista_avaliacao.radioButton113.setEnabled(False)
        lista_avaliacao.radioButton114.setEnabled(False)
        lista_avaliacao.radioButton115.setEnabled(False)
        lista_avaliacao.radioButton116.setEnabled(False)
        lista_avaliacao.radioButton117.setEnabled(False)
        lista_avaliacao.radioButton118.setEnabled(False)
        lista_avaliacao.radioButton119.setEnabled(False)
        lista_avaliacao.radioButton120.setEnabled(False)
        lista_avaliacao.radioButton121.setEnabled(False)
        lista_avaliacao.radioButton122.setEnabled(False)
        ###################QUESTÃO 1###############################

        if q1 == (4):
            lista_avaliacao.radioButton1.setChecked(True)
            print(q1)
            q1 = 4

        elif q1 == (3):
            lista_avaliacao.radioButton2.setChecked(True)
            print(q1)
            q1 = 3
        elif q1 == (2):
            lista_avaliacao.radioButton3.setChecked(True)
            print(q1)
            q1 = 2
        elif q1 == (1):
            lista_avaliacao.radioButton4.setChecked(True)
            print(q1)
            q1 = 1
        elif q1 == (0):
            lista_avaliacao.radioButton5.setChecked(True)
            print(q1)
            q1 = 0
###################QUESTÃO 2###############################
        if q2 == (4):
            lista_avaliacao.radioButton6.setChecked(True)
            print(q2)
            q2 = 4
        elif q2 == (3):
            lista_avaliacao.radioButton7.setChecked(True)
            print(q2)
            q2 = 3
        elif q2 == (2):
            lista_avaliacao.radioButton8.setChecked(True)
            print(q2)
            q2 = 2
        elif q2 == (1):
            lista_avaliacao.radioButton9.setChecked(True)
            print(q2)
            q2 = 1
        elif q2 == (0):
            lista_avaliacao.radioButton10.setChecked(True)
            print(q2)
            q1 = 0
    ###################QUESTÃO 3###############################
        if q3 == (4):
            lista_avaliacao.radioButton11.setChecked(True)
            print(q3)
            q3 = 4
        elif q3 == (3):
            lista_avaliacao.radioButton12.setChecked(True)
            print(q3)
            q3 = 3
        elif q3 == (2):
            lista_avaliacao.radioButton13.setChecked(True)
            print(q3)
            q3 = 2

        elif q3 == (1):
            lista_avaliacao.radioButton14.setChecked(True)
            print(q3)
            q3 = 1

        elif q3 == (0):
            lista_avaliacao.radioButton15.setChecked(True)
            print(q3)
            q3 = 0
    ###################QUESTÃO 4###############################
        if q4 == (4):
            lista_avaliacao.radioButton16.setChecked(True)
            print(q4)
            q4 = 4
        elif q4 == (3):
            lista_avaliacao.radioButton17.setChecked(True)
            print(q4)
            q4 = 3
        elif q4 == (2):
            lista_avaliacao.radioButton18.setChecked(True)
            print(q4)
            q4 = 2

        elif q4 == (1):
            lista_avaliacao.radioButton19.setChecked(True)
            print(q4)
            q4 = 1

        elif q4 == (0):
            lista_avaliacao.radioButton20.setChecked(True)
            print(q4)
            q4 = 0

    ###################QUESTÃO 5###############################
        if q5 == (4):
            lista_avaliacao.radioButton21.setChecked(True)
            print(q5)
            q5 = 4
        elif q5 == (3):
            lista_avaliacao.radioButton22.setChecked(True)
            print(q5)
            q5 = 3
        elif q5 == (2):
            lista_avaliacao.radioButton23.setChecked(True)
            print(q5)
            q5 = 2
        elif q5 == (1):
            lista_avaliacao.radioButton24.setChecked(True)
            print(q5)
            q5 = 1

        elif q5 == (0):
            lista_avaliacao.radioButton25.setChecked(True)
            print(q5)
            q5 = 0
    ###################QUESTÃO 6###############################
        if q6 == (4):
            lista_avaliacao.radioButton26.setChecked(True)
            print(q6)
            q6 = 4

        elif q6 == (3):
            lista_avaliacao.radioButton27.setChecked(True)
            print(q6)
            q6 = 3
        elif q6 == (2):
            lista_avaliacao.radioButton28.setChecked(True)
            print(q6)
            q6 = 2

        elif q6 == (1):
            lista_avaliacao.radioButton29.setChecked(True)
            print(q6)
            q6 = 1
        elif q6 == (0):
            lista_avaliacao.radioButton30.setChecked(True)
            print(q6)
            q6 = 0
    ###################QUESTÃO 7###############################
        if q7 == (4):
            lista_avaliacao.radioButton31.setChecked(True)
            print(q7)
            q7 = 4
        elif q7 == (3):
            lista_avaliacao.radioButton32.setChecked(True)
            print(q7)
            q7 = 3
        elif q7 == (2):
            lista_avaliacao.radioButton33.setChecked(True)
            print(q7)
            q7 = 2
        elif q7 == (1):
            lista_avaliacao.radioButton34.setChecked(True)
            print(q7)
            q7 = 1
        elif q7 == (0):
            lista_avaliacao.radioButton35.setChecked(True)
            print(q7)
            q7 = 0

    ###################QUESTÃO 8###############################
        if q8 == (4):
            lista_avaliacao.radioButton36.setChecked(True)
            print(q8)
            q8 = 4

        elif q8 == (3):
            lista_avaliacao.radioButton37.setChecked(True)
            print(q8)
            q8 = 3
        elif q8 == (2):
            lista_avaliacao.radioButton38.setChecked(True)
            print(q8)
            q8 = 2
        elif q8 == (1):
            lista_avaliacao.radioButton39.setChecked(True)
            print(q8)
            q8 = 1
        elif q8 == (0):
            lista_avaliacao.radioButton40.setChecked(True)
            print(q8)
            q8 = 0
    ###################QUESTÃO 9###############################
        if q9 == (4):
            lista_avaliacao.radioButton41.setChecked(True)
            print(q9)
            q9 = 4
        elif q9 == (3):
            lista_avaliacao.radioButton42.setChecked(True)
            print(q9)
            q9 = 3
        elif q9 == (2):
            lista_avaliacao.radioButton43.setChecked(True)
            print(q9)
            q9 = 2
        elif q9 == (1):
            lista_avaliacao.radioButton44.setChecked(True)
            print(q9)
            q9 = 1
        elif q9 == (0):
            lista_avaliacao.radioButton45.setChecked(True)
            print(q9)
            q9 = 0

    ###################QUESTÃO 10###############################
        if q10 == (4):
            lista_avaliacao.radioButton46.setChecked(True)
            print(q10)
            q10 = 4
        elif q10 == (3):
            lista_avaliacao.radioButton47.setChecked(True)
            print(q10)
            q10 = 3
        elif q10 == (2):
            lista_avaliacao.radioButton48.setChecked(True)
            print(q10)
            q10 = 2
        elif q10 == (1):
            lista_avaliacao.radioButton49.setChecked(True)
            print(q10)
            q10 = 1
        elif q10 == (0):
            lista_avaliacao.radioButton50.setChecked(True)
            print(q10)
            q10 = 0
    ###################QUESTÃO 11###############################
        if q11 == (4):
            lista_avaliacao.radioButton51.setChecked(True)
            print(q11)
            q11 = 4
        elif q11 == (3):
            lista_avaliacao.radioButton52.setChecked(True)
            print(q11)
            q11 = 3
        elif q11 == (2):
            lista_avaliacao.radioButton53.setChecked(True)
            print(q11)
            q11 = 2
        elif q11 == (1):
            lista_avaliacao.radioButton54.setChecked(True)
            print(q11)
            q11 = 1
        elif q11 == (0):
            lista_avaliacao.radioButton55.setChecked(True)
            print(q11)
            q11 = 0
    ###################QUESTÃO 12###############################
        if q12 == (4):
            lista_avaliacao.radioButton56.setChecked(True)
            print(q12)
            q12 = 4
        elif q12 == (3):
            lista_avaliacao.radioButton57.setChecked(True)
            print(q12)
            q12 = 3
        elif q12 == (2):
            lista_avaliacao.radioButton58.setChecked(True)
            print(q12)
            q12 = 2
        elif q12 == (1):
            lista_avaliacao.radioButton59.setChecked(True)
            print(q12)
            q12 = 1
        elif q12 == (0):
            lista_avaliacao.radioButton60.setChecked(True)
            print(q12)
            q12 = 0
    ###################QUESTÃO 13###############################
        if q13 == (4):
            lista_avaliacao.radioButton61.setChecked(True)
            print(q13)
            q13 = 4
        elif q13 == (3):
            lista_avaliacao.radioButton62.setChecked(True)
            print(q13)
            q13 = 3
        elif q13 == (2):
            lista_avaliacao.radioButton63.setChecked(True)
            print(q13)
            q13 = 2
        elif q13 == (1):
            lista_avaliacao.radioButton64.setChecked(True)
            print(q13)
            q13 = 1
        elif q13 == (0):
            lista_avaliacao.radioButton65.setChecked(True)
            print(q13)
            q13 = 0

    ###################QUESTÃO 14###############################
        if q14 == (4):
            lista_avaliacao.radioButton66.setChecked(True)
            print(q14)
            q14 = 4
        elif q14 == (3):
            lista_avaliacao.radioButton67.setChecked(True)
            print(q14)
            q14 = 3
        elif q14 == (2):
            lista_avaliacao.radioButton68.setChecked(True)
            print(q14)
            q14 = 2
        elif q14 == (1):
            lista_avaliacao.radioButton69.setChecked(True)
            print(q14)
            q14 = 1
        elif q14 == (0):
            lista_avaliacao.radioButton70.setChecked(True)
            print(q14)
            q14 = 0

    ###################QUESTÃO 15###############################
        if q15 == (4):
            lista_avaliacao.radioButton71.setChecked(True)
            print(q15)
            q15 = 4
        elif q15 == (3):
            lista_avaliacao.radioButton72.setChecked(True)
            print(q15)
            q15 = 3
        elif q15 == (2):
            lista_avaliacao.radioButton73.setChecked(True)
            print(q15)
            q15 = 2
        elif q15 == (1):
            lista_avaliacao.radioButton74.setChecked(True)
            print(q15)
            q15 = 1
        elif q15 == (0):
            lista_avaliacao.radioButton75.setChecked(True)
            print(q15)
            q15 = 0

    ###################QUESTÃO 16###############################
        if q16 == (4):
            lista_avaliacao.radioButton76.setChecked(True)
            print(q16)
            q16 = 4
        elif q16 == (3):
            lista_avaliacao.radioButton77.setChecked(True)
            print(q16)
            q16 = 3
        elif q16 == (2):
            lista_avaliacao.radioButton78.setChecked(True)
            print(q16)
            q16 = 2
        elif q16 == (1):
            lista_avaliacao.radioButton79.setChecked(True)
            print(q16)
            q16 = 1
        elif q16 == (0):
            lista_avaliacao.radioButton80.setChecked(True)
            print(q16)
            q16 = 0

    ###################QUESTÃO 17###############################
        if q17 == (4):
            lista_avaliacao.radioButton81.setChecked(True)
            print(q17)
            q17 = 4
        elif q17 == (3):
            lista_avaliacao.radioButton82.setChecked(True)
            print(q17)
            q17 = 3
        elif q17 == (2):
            lista_avaliacao.radioButton83.setChecked(True)
            print(q17)
            q17 = 2
        elif q17 == (1):
            lista_avaliacao.radioButton84.setChecked(True)
            print(q17)
            q17 = 1
        elif q17 == (0):
            lista_avaliacao.radioButton85.setChecked(True)
            print(q17)
            q17 = 0

    # ###################QUESTÃO q18###############################
        if q18 == (4):
            lista_avaliacao.radioButton86.setChecked(True)
            print(q18)
            q18 = 4
        elif q18 == (3):
            lista_avaliacao.radioButton87.setChecked(True)
            print(q18)
            q18 = 3
        elif q18 == (2):
            lista_avaliacao.radioButton88.setChecked(True)
            print(q18)
            q18 = 2
        elif q18 == (1):
            lista_avaliacao.radioButton89.setChecked(True)
            print(q18)
            q18 = 1
        elif q18 == (0):
            lista_avaliacao.radioButton90.setChecked(True)
            print(q18)
            q18 = 0

    ###################QUESTÃO 19###############################
        if q19 == (4):
            lista_avaliacao.radioButton91.setChecked(True)
            print(q19)
            q19 = 4
        elif q19 == (3):
            lista_avaliacao.radioButton92.setChecked(True)
            print(q19)
            q19 = 3
        elif q19 == (2):
            lista_avaliacao.radioButton93.setChecked(True)
            print(q19)
            q19 = 2
        elif q19 == (1):
            lista_avaliacao.radioButton94.setChecked(True)
            print(q19)
            q19 = 1
        elif q19 == (0):
            lista_avaliacao.radioButton95.setChecked(True)
            print(q19)
            q19 = 0

    ###################QUESTÃO q20###############################
        if q20 == (4):
            lista_avaliacao.radioButton96.setChecked(True)
            print(q20)
            q20 = 4
        elif q20 == (3):
            lista_avaliacao.radioButton97.setChecked(True)
            print(q20)
            q20 = 3
        elif q20 == (2):
            lista_avaliacao.radioButton98.setChecked(True)
            print(q20)
            q20 = 2
        elif q20 == (1):
            lista_avaliacao.radioButton99.setChecked(True)
            print(q20)
            q20 = 1
        elif q20 == (0):
            lista_avaliacao.radioButton100.setChecked(True)
            print(q20)
            q20 = 0

    ###################QUESTÃO q21###############################
        if q21 == (4):
            lista_avaliacao.radioButton101.setChecked(True)
            print(q21)
            q21 = 4
        elif q21 == (3):
            lista_avaliacao.radioButton102.setChecked(True)
            print(q21)
            q21 = 3
        elif q21 == (2):
            lista_avaliacao.radioButton103.setChecked(True)
            print(q21)
            q21 = 2
        elif q21 == (1):
            lista_avaliacao.radioButton104.setChecked(True)
            print(q21)
            q21 = 1
        elif q21 == (0):
            lista_avaliacao.radioButton105.setChecked(True)
            print(q21)
            q21 = 0

    ###################QUESTÃO q22###############################
        if q22 == (4):
            lista_avaliacao.radioButton106.setChecked(True)
            print(q22)
            q22 = 4
        elif q22 == (3):
            lista_avaliacao.radioButton107.setChecked(True)
            print(q22)
            q22 = 3
        elif q22 == (2):
            lista_avaliacao.radioButton108.setChecked(True)
            print(q22)
            q22 = 2
        elif q22 == (1):
            lista_avaliacao.radioButton109.setChecked(True)
            print(q22)
            q22 = 1
        elif q22 == (0):
            lista_avaliacao.radioButton110.setChecked(True)
            print(q22)
            q22 = 0

    ###################QUESTÃO q23###############################
        if q23 == (4):
            lista_avaliacao.radioButton111.setChecked(True)
            print(q23)
            q23 = 4
        elif q23 == (3):
            lista_avaliacao.radioButton112.setChecked(True)
            print(q23)
            q23 = 3
        elif q23 == (2):
            lista_avaliacao.radioButton113.setChecked(True)
            print(q23)
            q23 = 2
        elif q23 == (1):
            lista_avaliacao.radioButton114.setChecked(True)
            print(q23)
            q23 = 1
        elif q23 == (0):
            lista_avaliacao.radioButton115.setChecked(True)
            print(q23)
            q23 = 0

    ###################QUESTÃO q24###############################
        if q24 == (4):
            lista_avaliacao.radioButton116.setChecked(True)
            print(q24)
            q24 = 4
        elif q24 == (3):
            lista_avaliacao.radioButton117.setChecked(True)
            print(q24)
            q24 = 3
        elif q24 == (2):
            lista_avaliacao.radioButton118.setChecked(True)
            print(q24)
            q24 = 2
        elif q24 == (1):
            lista_avaliacao.radioButton119.setChecked(True)
            print(q24)
            q24 = 1
        elif q24 == (0):
            lista_avaliacao.radioButton120.setChecked(True)
            print(q24)
            q24 = 0
###fim do preenchimento das informações no formulário###
        lista_avaliacao.show()
        numero_id = valor_id
        # lista_avaliacao.label_3.setText(str(valor_id)) #valor_id era pra inserir avaliação sendo gestor

    except IndexError:
        gotdata = 'null'
        QMessageBox.about(lista_avaliacao, "Vazio", "Lista vazia")
        # LISTA AVALIACAO DO AVALIADOR, SUBSTITUIDO PELO FORMULARIO RECUPERÁVEL#####y
  #######da nova_avaliacao######


def detalhes_excluir_avaliacao():

    cursor = banco.cursor()
    # avaliador = lista_avaliacao_avaliador.label.text()
    comando_SQL2 = (
        "SELECT * FROM avaliacao_csp")
    cursor.execute(comando_SQL2)
    dados_lidos = cursor.fetchall()
    linha2 = StatusAPIUX.tableWidget.currentRow()
    linha = linha2
    print("Encontrando as avaliações deste avaliador:", dados_lidos)
    valor_id = dados_lidos[linha][0]
    print("Valor_id da avaliacao é: ", valor_id)
    cursor.execute("SELECT * FROM avaliacao_csp WHERE id=" + str(valor_id))
    avaliacao = cursor.fetchall()
    # avaliacao é a própria linha da avaliação selecionada
    print("avaliacao é:", avaliacao)

    cursor.execute(
        "UPDATE avaliacao_csp SET atividade = (%s) WHERE id=(%s)""" % (0, valor_id,))

    banco.commit()
    QMessageBox.about(lista_avaliacao_avaliador, "ALERT",
                      "Avaliação INATIVADA com sucesso!")

    detalhes()


# 25/02


def cadastro_avaliador_salvar():  # novo salvar 24/05
    try:

        linha = tela_cadastro_avaliador.tableWidget.currentRow()
        # tela_cadastro_avaliador.tableWidget.removeRow(linha)
        # tela_editar_cadastro_avaliador.tableWidget.removeRow(linha)
        print("A linha do cadastro de avaliador é: ", linha)
        # rowl = linha
        print(linha)
        avaliador = [tela_cadastro_avaliador.tableWidget.item(
            linha, 1).text()]
        avaliadorusr = [tela_cadastro_avaliador.tableWidget.item(
            linha, 2).text()]
        avaliadorpw = [tela_cadastro_avaliador.tableWidget.item(
            linha, 3).text()]
        atividade = [tela_cadastro_avaliador.tableWidget.item(
            linha, 4).text()]
        cursor = banco.cursor()
        cursor.execute("SELECT * FROM avaliadores")
        dados_lidos = cursor.fetchall()
        valor_id = dados_lidos[linha][0]
        print("Valor_id é: ", valor_id)
        cursor.execute(
            "SELECT * FROM avaliadores WHERE avaliadorid=" + str(valor_id))
        # avaliacao = cursor.fetchall()
        avaliacao = cursor.fetchall()
        print(avaliacao)
        print(avaliador)
        # cursor.execute(
        #     "delete FROM avaliadores WHERE avaliadorid=" + str(valor_id))
        # print("Removido do banco")
        # QMessageBox.about(tela_editar_cadastro_avaliador, "Concluído",
        #                   "Avaliador excluído com sucesso!")
        banco.commit()
        # cursor = banco.cursor()

        cursor.execute("UPDATE avaliadores SET avaliador='%s', avaliadorusr='%s', atividade='%s' WHERE avaliadorid='%s'""" % (
            ''.join(avaliador), ''.join(avaliadorusr), ''.join(atividade), valor_id))

        ###A SENHA não pode ser modificada###
        # cursor.execute("UPDATE avaliadores SET avaliador='%s', avaliadorusr='%s', avaliadorpw='%s', atividade='%s' WHERE avaliadorid='%s'""" % (
        #             ''.join(avaliador), ''.join(avaliadorusr), ''.join(avaliadorpw), ''.join(atividade), valor_id))

        # Antes gestor era =0, mas se editar o administrador ele não pode ser 0
        # cursor.execute("UPDATE avaliadores SET avaliador='%s', avaliadorusr='%s', avaliadorpw='%s', atividade='%s', gestor=0 WHERE avaliadorid='%s'""" % (
        #     ''.join(avaliador), ''.join(avaliadorusr), ''.join(avaliadorpw), ''.join(atividade), valor_id))

        # cursor.execute(
        #     "insert into avaliadores(avaliador,avaliadorusr,avaliadorpw,gestor)" "VALUES('%s','%s','%s',0)" % (''.join(avaliador), ''.join(avaliadorusr), ''.join(avaliadorpw,)))
        print("dados inseridos com sucesso!")
        QMessageBox.about(tela_cadastro_avaliador, "Concluído",
                          "Avaliador editado com sucesso!")
        banco.commit()
        # cadastro_avaliador()
    except mysql.connector.IntegrityError as err:
        print("Error: {}".format(err))
        avaliador = avaliador[0]
        print(avaliador)

        QMessageBox.about(tela_cadastro_avaliador, "ALERTA",
                          "Este avaliador já foi criado.")
        # QMessageBox.about(tela_cadastro_avaliador, "ALERTA",
        #                   "Este avaliador já foi criado, corrigir ou substituir:")
        # resp = QMessageBox.question(
        #     tela_cadastro_avaliador, 'Continuar?', 'Substituir', QMessageBox.Yes | QMessageBox.No)
        # if resp == QMessageBox.Yes:
        #     print("Substituindo.")
        #     cursor.execute("delete from avaliadores where avaliador=('%s')""" % (
        #         str(avaliador)))
        #     print("Deletado")
        #     banco.commit()
        #     cursor.close()
        #     # formulario_avaliacao.close()
        #     cursor = banco.cursor()

        #     cursor.execute(
        #         "insert into avaliadores(avaliador,avaliadorusr,avaliadorpw,gestor)" "VALUES('%s','%s','%s',0)" % (''.join(avaliador), ''.join(avaliadorusr), ''.join(avaliadorpw,)))
        #     QMessageBox.about(tela_editar_cadastro_avaliador, "Concluído",
        #                       "Avaliador substituído com sucesso!")
        cadastro_avaliador()

    banco.commit()


def cadastro_provedor_salvar():  # novo salvar 24/05
    try:

        linha = tela_cadastro_provedor.tableWidget.currentRow()

        print("A linha do cadastro de avaliador é: ", linha)
        # rowl = linha
        print(linha)
        provedor = [tela_cadastro_provedor.tableWidget.item(
            linha, 1).text()]
        atividade = [tela_cadastro_provedor.tableWidget.item(
            linha, 2).text()]
        cursor = banco.cursor()
        cursor.execute("SELECT * FROM provedores")
        dados_lidos = cursor.fetchall()
        valor_id = dados_lidos[linha][0]
        print("Valor_id é: ", valor_id)
        cursor.execute(
            "SELECT * FROM provedores WHERE provedorid=" + str(valor_id))
        # avaliacao = cursor.fetchall()
        avaliacao = cursor.fetchall()
        print(avaliacao)
        print(provedor)
        # cursor.execute(
        #     "delete FROM avaliadores WHERE avaliadorid=" + str(valor_id))
        # print("Removido do banco")
        # QMessageBox.about(tela_editar_cadastro_avaliador, "Concluído",
        #                   "Avaliador excluído com sucesso!")
        banco.commit()
        # cursor = banco.cursor()

        cursor.execute("UPDATE provedores SET provedor='%s', atividade='%s' WHERE provedorid='%s'""" % (
            ''.join(provedor), ''.join(atividade), valor_id))
        # Antes gestor era =0, mas se editar o administrador ele não pode ser 0
        # cursor.execute("UPDATE avaliadores SET avaliador='%s', avaliadorusr='%s', avaliadorpw='%s', atividade='%s', gestor=0 WHERE avaliadorid='%s'""" % (
        #     ''.join(avaliador), ''.join(avaliadorusr), ''.join(avaliadorpw), ''.join(atividade), valor_id))

        # cursor.execute(
        #     "insert into avaliadores(avaliador,avaliadorusr,avaliadorpw,gestor)" "VALUES('%s','%s','%s',0)" % (''.join(avaliador), ''.join(avaliadorusr), ''.join(avaliadorpw,)))
        print("dados inseridos com sucesso!")
        QMessageBox.about(tela_cadastro_provedor, "Concluído",
                          "Provedor editado com sucesso!")
        banco.commit()
        # cadastro_avaliador()
    except mysql.connector.IntegrityError as err:
        print("Error: {}".format(err))
        provedor = provedor[0]
        print(provedor)

        QMessageBox.about(tela_cadastro_avaliador, "ALERTA",
                          "Este provedor já foi criado pra editar.")
        # QMessageBox.about(tela_cadastro_avaliador, "ALERTA",
        #                   "Este avaliador já foi criado, corrigir ou substituir:")
        # resp = QMessageBox.question(
        #     tela_cadastro_avaliador, 'Continuar?', 'Substituir', QMessageBox.Yes | QMessageBox.No)
        # if resp == QMessageBox.Yes:
        #     print("Substituindo.")
        #     cursor.execute("delete from avaliadores where avaliador=('%s')""" % (
        #         str(avaliador)))
        #     print("Deletado")
        #     banco.commit()
        #     cursor.close()
        #     # formulario_avaliacao.close()
        #     cursor = banco.cursor()

        #     cursor.execute(
        #         "insert into avaliadores(avaliador,avaliadorusr,avaliadorpw,gestor)" "VALUES('%s','%s','%s',0)" % (''.join(avaliador), ''.join(avaliadorusr), ''.join(avaliadorpw,)))
        #     QMessageBox.about(tela_editar_cadastro_avaliador, "Concluído",
        #                       "Avaliador substituído com sucesso!")
        cadastro_provedor()

    banco.commit()


def cadastro_inserir_provedor():

    provedor = [tela_cadastro_provedor.tableWidget_2.item(
        row, 0)for row in range(tela_cadastro_provedor.tableWidget_2.rowCount())]
    atividade = [tela_cadastro_provedor.tableWidget_2.item(
        row, 1) for row in range(tela_cadastro_provedor.tableWidget_2.rowCount())]

    provedor = provedor[0]

    atividade = atividade[0]
    # print(provedor)
    # print(atividade)

    if provedor is None:
        QMessageBox.about(tela_cadastro_provedor, "ALERTA",
                          "Provedor não pode ser vazio, corrigir:")
        print("Nome do cadastro de provedor:", provedor)
        return
    if atividade is None:
        QMessageBox.about(tela_cadastro_provedor, "ALERTA",
                          "Atividade não pode ser vazia, corrigir:")
        print("Ativo=1 e desativado=1:", atividade)
        return
    try:
        k1 = "0.50"
        k2 = "0.25"
        k3 = "0.25"
        rb = "1.1"
        provedor = [tela_cadastro_provedor.tableWidget_2.item(
            row, 0).text() for row in range(tela_cadastro_provedor.tableWidget_2.rowCount())]
        atividade = [tela_cadastro_provedor.tableWidget_2.item(
            row, 1).text() for row in range(tela_cadastro_provedor.tableWidget_2.rowCount())]
        cursor = banco.cursor()
        cursor.execute("insert into provedores(provedor,atividade,k1,k2,k3)" "VALUES('%s','%s','%s','%s','%s')" %
                       (''.join(provedor),
                        ''.join(atividade),
                        ''.join(k1),
                        ''.join(k2),
                        ''.join(k3),
                        ''.join(rb)))

        print("dados inseridos com sucesso! Provedor Criado!")
        QMessageBox.about(tela_cadastro_provedor, "ALERTA",
                          "Provedor criado com sucesso!")
        banco.commit()
        cadastro_provedor()
        #limpando tablewidget do cadastro de provedor#
        for i in range(0, 1):
            for j in range(0, 4):
                tela_cadastro_provedor.tableWidget_2.setItem(
                    i, j, QtWidgets.QTableWidgetItem(""))
        print("Limpando cadastro de provedor")
    except:
        QMessageBox.about(tela_cadastro_provedor, "ALERTA",
                          "Este provedor já foi criado")
        #limpando tablewidget do cadastro de provedor#
        for i in range(0, 1):
            for j in range(0, 4):
                tela_cadastro_provedor.tableWidget_2.setItem(
                    i, j, QtWidgets.QTableWidgetItem(""))
        print("Limpando cadastro de provedor")


def excluir_dados():
    linha = lista_avaliacao.tableWidget.currentRow()
    QMessageBox.about(lista_avaliacao, "ALERTA",
                      "Tecla excluir pressionada, cancelar ou continuar")
    resp = QMessageBox.question(
        lista_avaliacao, 'Continuar?', 'Excluir a avaliação.', QMessageBox.Yes | QMessageBox.No)
    if resp == QMessageBox.Yes:
        lista_avaliacao.tableWidget.removeRow(linha)
        print(linha)

        cursor = banco.cursor()
        cursor.execute("SELECT id FROM avaliacao_csp")
        dados_lidos = cursor.fetchall()
        print(dados_lidos)
        try:
            valor_id = dados_lidos[linha][0]
            cursor.execute(
                "DELETE FROM avaliacao_csp WHERE id=" + str(valor_id))
            banco.commit()
            tela_login_dados()
            detalhes()
            cursor.close()
        except IndexError:
            # gotdata = 'null'
            QMessageBox.about(lista_avaliacao, "Vazio", "Lista vazia")

    else:
        return detalhes()


def excluir_dados_avaliador():
    linha2 = lista_avaliacao_avaliador.tableWidget.currentRow()
    QMessageBox.about(lista_avaliacao_avaliador, "ALERTA",
                      "Tecla excluir pressionada, cancelar ou continuar")
    resp = QMessageBox.question(
        lista_avaliacao_avaliador, 'Continuar?', 'Excluir a avaliação.', QMessageBox.Yes | QMessageBox.No)
    if resp == QMessageBox.Yes:
        avaliador2 = formulario_avaliacao.label.text()
        avaliador = (str(avaliador2))
        # print("Linha que será excluida do avaliador" % linha2)
    # print("id do avaliador que será excluido:", avaliador)
        print("Nome do avaliador que será excluido:", avaliador)

        # cursor = banco.cursor()
        # comando_SQL = (
        #     "SELECT id FROM avaliacao_csp where avaliadorid=('%s')" % (avaliadorid,))
        # cursor.execute(comando_SQL)
        # dados_lidos = cursor.fetchall()
        # # pegou todos que tem este id do avaliador, entao
        # valor_id = dados_lidos[linha2][0]
        cursor = banco.cursor()
        comando_SQL = (
            "SELECT id FROM avaliacao_csp where avaliador=('%s')" % (avaliador,))
        cursor.execute(comando_SQL)
        dados_lidos = cursor.fetchall()
        # pegou todos que tem este id do avaliador, entao
        try:
            valor_id = dados_lidos[linha2][0]
            print("Excluindo")
            # formulario_avaliacao.close()
            QMessageBox.about(lista_avaliacao_avaliador, "Excluído",
                              "Avaliação excluída com sucesso!")
            lista_avaliacao_avaliador.tableWidget.removeRow(linha2)
            # dados = valor_id
            print("ID da linha que será removida do avaliador:", valor_id)
            comando_SQL = "DELETE FROM avaliacao_csp WHERE id=('%s')" % str(
                valor_id,)
            cursor.execute(comando_SQL)
            banco.commit()
            tela_login_dados_avaliador()  # se não der certo colocar o .show na tela_login_sql
            detalhes_avaliador()
            cursor.close()
        except IndexError:
            # gotdata = 'null'
            QMessageBox.about(lista_avaliacao_avaliador, "Vazio",
                              "Lista avaliacao avaliador (Detalhes) vazia")

    else:
        return detalhes_avaliador()

    # avaliadorid2 = formulario_avaliacao.label_2.text()
    # avaliadorid = (int(avaliadorid2))


def sair():
    sys.exit()


def voltar_statusapiux():
    StatusAPIUX.close()


def voltar_statusapiux_avaliador():
    StatusAPIUX_avaliador.close()


def voltar_cadastro_provedor():
    tela_cadastro_provedor.close()


def voltar_cadastro_avaliador():
    tela_cadastro_avaliador.close()


def voltar_lista_avaliacao():
    lista_avaliacao.close()


def voltar_lista_avaliacao_avaliador():
    lista_avaliacao_avaliador.close()


def voltar_formulario_avaliacao():
    formulario_avaliacao.close()


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.botao_1 = QtWidgets.QPushButton(self.centralwidget)
        self.botao_1.setGeometry(QtCore.QRect(210, 270, 131, 71))
        self.botao_1.setStyleSheet("background-color: rgb(15, 143, 255);")
        self.botao_1.setObjectName("botao_1")
        self.botao_2 = QtWidgets.QPushButton(self.centralwidget)
        self.botao_2.setGeometry(QtCore.QRect(420, 270, 141, 71))
        self.botao_2.setStyleSheet("background-color: rgb(255, 0, 0);")
        self.botao_2.setObjectName("botao_2")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(350, 90, 47, 13))
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.botao_1.setText(_translate("MainWindow", "Botão1"))
        self.botao_2.setText(_translate("MainWindow", "Botão2"))
        self.label.setText(_translate("MainWindow", "TextLabel"))


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(767, 512)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(280, 80, 291, 101))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(70, 230, 171, 41))
        self.label_3.setStyleSheet("background-color: rgb(107, 170, 13);")
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(70, 290, 171, 41))
        self.label_4.setStyleSheet("background-color: rgb(107, 170, 13);")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(70, 170, 171, 41))
        self.label_2.setStyleSheet("background-color: rgb(107, 170, 13);")
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setGeometry(QtCore.QRect(260, 180, 113, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.botao1 = QtWidgets.QPushButton(Form)
        self.botao1.setGeometry(QtCore.QRect(330, 360, 75, 23))
        self.botao1.setObjectName("botao1")

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.label.setText(_translate("Form", "Formulário de avaliação"))
        self.botao1.setText(_translate("Form", "botao1"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    # app2 = QtWidgets.QApplication(sys.argv)
    # app3 = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    # Form2 = QtWidgets.QWidget()
    # app3.exec()
    # ui = Ui_Form()
    # ui.setupUi(Form)
    StatusAPIUX = uic.loadUi("ui/StatusAPIUX.ui")
    StatusAPIUX_avaliador = uic.loadUi(
        "ui/StatusAPIUX_avaliador.ui")
    formulario_avaliacao = uic.loadUi("ui/formulario_avaliacao.ui")

    lista_avaliacao = uic.loadUi("ui/lista_avaliacao.ui")

    tela_login = uic.loadUi("ui/tela_login.ui")
    tela_cadastro_avaliador = uic.loadUi("ui/tela_cadastro_avaliador.ui")
    tela_cadastro_provedor = uic.loadUi("ui/tela_cadastro_provedor.ui")
    lista_avaliacao = uic.loadUi("ui/lista_avaliacao.ui")
    lista_avaliacao_avaliador = uic.loadUi("ui/lista_avaliacao_avaliador.ui")

    StatusAPIUX_avaliador.botao_3.clicked.connect(detalhes_avaliador)
    tela_login.pushButton_2.clicked.connect(sair)

    StatusAPIUX_avaliador.botao_1.clicked.connect(funcao_iniciar)

    formulario_avaliacao.botao1.clicked.connect(nova_avaliacao)
    formulario_avaliacao.botao2.clicked.connect(voltar_formulario_avaliacao)

    lista_avaliacao_avaliador.botao1.clicked.connect(
        detalhes_avaliador_nova_avaliacao)
    lista_avaliacao_avaliador.botao2.clicked.connect(
        voltar_lista_avaliacao_avaliador)
    lista_avaliacao_avaliador.botao3.clicked.connect(
        detalhes_avaliador_excluir_avaliacao)
    lista_avaliacao.botao3.clicked.connect(
        detalhes_excluir_avaliacao)

    lista_avaliacao.botao2.clicked.connect(voltar_lista_avaliacao)

    StatusAPIUX.botao_1.clicked.connect(cadastro_avaliador)
    StatusAPIUX.botao_2.clicked.connect(cadastro_provedor)
    StatusAPIUX.botao_10.clicked.connect(detalhes)

    tela_cadastro_avaliador.pushButton_7.clicked.connect(
        cadastro_excluir_avaliador)
    tela_cadastro_avaliador.pushButton_8.clicked.connect(
        cadastro_inserir_avaliador)
    tela_cadastro_avaliador.pushButton_9.clicked.connect(
        cadastro_avaliador_salvar)

    tela_login.pushButton.clicked.connect(tela_login_sql)

    StatusAPIUX.botao_4.clicked.connect(voltar_statusapiux)
    StatusAPIUX.botao_5.clicked.connect(sair)
    StatusAPIUX_avaliador.botao_4.clicked.connect(voltar_statusapiux_avaliador)
    StatusAPIUX_avaliador.botao_5.clicked.connect(sair)

    tela_cadastro_provedor.pushButton_6.clicked.connect(
        voltar_cadastro_provedor)
    tela_cadastro_provedor.pushButton_8.clicked.connect(
        cadastro_inserir_provedor)
    tela_cadastro_provedor.pushButton_9.clicked.connect(
        cadastro_excluir_provedor)
    tela_cadastro_avaliador.pushButton_2.clicked.connect(
        voltar_cadastro_avaliador)

    tela_cadastro_provedor.pushButton_10.clicked.connect(
        cadastro_provedor_salvar)
    # 1
    tela_login.show()
    ####MAIN#####
    # StatusAPIUX.show()

    # Form.show()
    # formulario_avaliacao.show()# 1
    app.exec()  # 1
    # app2.exec()
    # sys.exit(app.exec_())
    # ui = Ui_Form()
    # ui.setupUi(Form)
    # Form.show()

    # MainWindow = QtWidgets.QMainWindow() #Originais do pyuic5 -x StatusAPIUX.ui -o StatusAPIUx.py
    # ui = Ui_MainWindow()
    # ui.setupUi(MainWindow)
    # MainWindow.show()
    sys.exit(app.exec_())
